syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2019-02-12 17:25:37
// ProtoYang-version 1
// module openconfig-telemetry
// revision 2017-08-24
// revision 2017-02-20
// revision 2016-04-05
// namespace http://openconfig.net/yang/telemetry

package openconfig_telemetry;

message TelemetrySystem {
   message DestinationGroups {
      message DestinationGroup {
         message Config {
            string group_id = 1;
         }
         Config config = 1;
         message Destinations {
            message Destination {
               message Config {
                  string destination_address = 1;
                  uint32 destination_port = 2;
               }
               Config config = 1;
               string destination_address = 2;
               uint32 destination_port = 3;
               message State {
                  string destination_address = 1;
                  uint32 destination_port = 2;
               }
               State state = 4;
            }
            repeated Destination destination = 1;
         }
         Destinations destinations = 2;
         string group_id = 3;
         message State {
            string group_id = 1;
         }
         State state = 4;
      }
      repeated DestinationGroup destination_group = 1;
   }
   DestinationGroups destination_groups = 1;
   message SensorGroups {
      message SensorGroup {
         message Config {
            string sensor_group_id = 1;
         }
         Config config = 1;
         string sensor_group_id = 2;
         message SensorPaths {
            message SensorPath {
               message Config {
                  string exclude_filter = 1;
                  string path = 2;
               }
               Config config = 1;
               string path = 2;
               message State {
                  string exclude_filter = 1;
                  string path = 2;
               }
               State state = 3;
            }
            repeated SensorPath sensor_path = 1;
         }
         SensorPaths sensor_paths = 3;
         message State {
            string sensor_group_id = 1;
         }
         State state = 4;
      }
      repeated SensorGroup sensor_group = 1;
   }
   SensorGroups sensor_groups = 2;
   message Subscriptions {
      message Dynamic {
         message Subscription {
            message SensorPaths {
               message SensorPath {
                  string path = 1;
                  message State {
                     string exclude_filter = 1;
                     string path = 2;
                  }
                  State state = 2;
               }
               repeated SensorPath sensor_path = 1;
            }
            SensorPaths sensor_paths = 1;
            message State {
               string destination_address = 1;
               uint32 destination_port = 2;
               string encoding = 3;
               uint64 heartbeat_interval = 4;
               uint32 originated_qos_marking = 5;
               string protocol = 6;
               uint64 sample_interval = 7;
               uint64 subscription_id = 8;
               bool suppress_redundant = 9;
            }
            State state = 2;
            uint64 subscription_id = 3;
         }
         repeated Subscription subscription = 1;
      }
      Dynamic dynamic = 1;
      message Persistent {
         message Subscription {
            message Config {
               string encoding = 1;
               string local_source_address = 2;
               uint32 originated_qos_marking = 3;
               string protocol = 4;
               string subscription_name = 5;
            }
            Config config = 1;
            message DestinationGroups {
               message DestinationGroup {
                  message Config {
                     string group_id = 1;
                  }
                  Config config = 1;
                  string group_id = 2;
                  message State {
                     string group_id = 1;
                  }
                  State state = 3;
               }
               repeated DestinationGroup destination_group = 1;
            }
            DestinationGroups destination_groups = 2;
            message SensorProfiles {
               message SensorProfile {
                  message Config {
                     uint64 heartbeat_interval = 1;
                     uint64 sample_interval = 2;
                     string sensor_group = 3;
                     bool suppress_redundant = 4;
                  }
                  Config config = 1;
                  string sensor_group = 2;
                  message State {
                     uint64 heartbeat_interval = 1;
                     uint64 sample_interval = 2;
                     string sensor_group = 3;
                     bool suppress_redundant = 4;
                  }
                  State state = 3;
               }
               repeated SensorProfile sensor_profile = 1;
            }
            SensorProfiles sensor_profiles = 3;
            message State {
               string encoding = 1;
               string local_source_address = 2;
               uint32 originated_qos_marking = 3;
               string protocol = 4;
               uint64 subscription_id = 5;
               string subscription_name = 6;
            }
            State state = 4;
            string subscription_name = 5;
         }
         repeated Subscription subscription = 1;
      }
      Persistent persistent = 2;
   }
   Subscriptions subscriptions = 3;
}

