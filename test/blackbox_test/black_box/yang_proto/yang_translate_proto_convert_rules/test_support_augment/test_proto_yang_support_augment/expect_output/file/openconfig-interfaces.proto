syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-19 15:48:41
// ProtoYang-version 1
// module openconfig-interfaces
// revision 2018-01-05
// revision 2017-12-22
// revision 2017-12-21
// revision 2017-07-14
// revision 2017-04-03
// revision 2016-12-22
// namespace http://openconfig.net/yang/interfaces

package openconfig_interfaces;

message Interfaces {
   message Interface {
      message Config {
         string description = 1 [json_name = "description"];
         bool enabled = 2 [json_name = "enabled"];
         bool loopback_mode = 3 [json_name = "loopback-mode"];
         uint32 mtu = 4 [json_name = "mtu"];
         string name = 5 [json_name = "name"];
         string type = 6 [json_name = "type"];
      }
      Config config = 1 [json_name = "config"];
      message HoldTime {
         message Config {
            uint32 down = 1 [json_name = "down"];
            uint32 up = 2 [json_name = "up"];
         }
         Config config = 1 [json_name = "config"];
         message State {
            uint32 down = 1 [json_name = "down"];
            uint32 up = 2 [json_name = "up"];
         }
         State state = 2 [json_name = "state"];
      }
      HoldTime hold_time = 2 [json_name = "hold-time"];
      string name = 3 [json_name = "name"];
      message State {
         enum AdminStatus {
            AdminStatus_DOWN = 0;
            AdminStatus_TESTING = 1;
            AdminStatus_UP = 2;
         };
         AdminStatus admin_status = 1 [json_name = "admin-status"];
         message Counters {
            uint64 carrier_transitions = 1 [json_name = "carrier-transitions"];
            uint64 in_broadcast_pkts = 2 [json_name = "in-broadcast-pkts"];
            uint64 in_discards = 3 [json_name = "in-discards"];
            uint64 in_errors = 4 [json_name = "in-errors"];
            uint64 in_fcs_errors = 5 [json_name = "in-fcs-errors"];
            uint64 in_multicast_pkts = 6 [json_name = "in-multicast-pkts"];
            uint64 in_octets = 7 [json_name = "in-octets"];
            uint64 in_unicast_pkts = 8 [json_name = "in-unicast-pkts"];
            uint64 in_unknown_protos = 9 [json_name = "in-unknown-protos"];
            uint64 last_clear = 10 [json_name = "last-clear"];
            uint64 out_broadcast_pkts = 11 [json_name = "out-broadcast-pkts"];
            uint64 out_discards = 12 [json_name = "out-discards"];
            uint64 out_errors = 13 [json_name = "out-errors"];
            uint64 out_multicast_pkts = 14 [json_name = "out-multicast-pkts"];
            uint64 out_octets = 15 [json_name = "out-octets"];
            uint64 out_unicast_pkts = 16 [json_name = "out-unicast-pkts"];
         }
         Counters counters = 2 [json_name = "counters"];
         string description = 3 [json_name = "description"];
         bool enabled = 4 [json_name = "enabled"];
         uint32 ifindex = 5 [json_name = "ifindex"];
         uint64 last_change = 6 [json_name = "last-change"];
         bool loopback_mode = 7 [json_name = "loopback-mode"];
         uint32 mtu = 8 [json_name = "mtu"];
         string name = 9 [json_name = "name"];
         enum OperStatus {
            INVALID_ENUM_VALUE_OperStatus = 0;
            OperStatus_UP = 1;
            OperStatus_DOWN = 2;
            OperStatus_TESTING = 3;
            OperStatus_UNKNOWN = 4;
            OperStatus_DORMANT = 5;
            OperStatus_NOT_PRESENT = 6;
            OperStatus_LOWER_LAYER_DOWN = 7;
         };
         OperStatus oper_status = 10 [json_name = "oper-status"];
         string type = 11 [json_name = "type"];
      }
      State state = 4 [json_name = "state"];
      message Subinterfaces {
         message Subinterface {
            message Config {
               string description = 1 [json_name = "description"];
               bool enabled = 2 [json_name = "enabled"];
               uint32 index = 3 [json_name = "index"];
            }
            Config config = 1 [json_name = "config"];
            uint32 index = 2 [json_name = "index"];
            message State {
               enum AdminStatus {
                  AdminStatus_DOWN = 0;
                  AdminStatus_TESTING = 1;
                  AdminStatus_UP = 2;
               };
               AdminStatus admin_status = 1 [json_name = "admin-status"];
               message Counters {
                  uint64 carrier_transitions = 1 [json_name = "carrier-transitions"];
                  uint64 in_broadcast_pkts = 2 [json_name = "in-broadcast-pkts"];
                  uint64 in_discards = 3 [json_name = "in-discards"];
                  uint64 in_errors = 4 [json_name = "in-errors"];
                  uint64 in_fcs_errors = 5 [json_name = "in-fcs-errors"];
                  uint64 in_multicast_pkts = 6 [json_name = "in-multicast-pkts"];
                  uint64 in_octets = 7 [json_name = "in-octets"];
                  uint64 in_unicast_pkts = 8 [json_name = "in-unicast-pkts"];
                  uint64 in_unknown_protos = 9 [json_name = "in-unknown-protos"];
                  uint64 last_clear = 10 [json_name = "last-clear"];
                  uint64 out_broadcast_pkts = 11 [json_name = "out-broadcast-pkts"];
                  uint64 out_discards = 12 [json_name = "out-discards"];
                  uint64 out_errors = 13 [json_name = "out-errors"];
                  uint64 out_multicast_pkts = 14 [json_name = "out-multicast-pkts"];
                  uint64 out_octets = 15 [json_name = "out-octets"];
                  uint64 out_unicast_pkts = 16 [json_name = "out-unicast-pkts"];
               }
               Counters counters = 2 [json_name = "counters"];
               string description = 3 [json_name = "description"];
               bool enabled = 4 [json_name = "enabled"];
               uint32 ifindex = 5 [json_name = "ifindex"];
               uint32 index = 6 [json_name = "index"];
               uint64 last_change = 7 [json_name = "last-change"];
               string name = 8 [json_name = "name"];
               enum OperStatus {
                  INVALID_ENUM_VALUE_OperStatus = 0;
                  OperStatus_UP = 1;
                  OperStatus_DOWN = 2;
                  OperStatus_TESTING = 3;
                  OperStatus_UNKNOWN = 4;
                  OperStatus_DORMANT = 5;
                  OperStatus_NOT_PRESENT = 6;
                  OperStatus_LOWER_LAYER_DOWN = 7;
               };
               OperStatus oper_status = 9 [json_name = "oper-status"];
            }
            State state = 3 [json_name = "state"];
            message Ipv4 {
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     message Config {
                        string ip = 1 [json_name = "ip"];
                        uint32 prefix_length = 2 [json_name = "prefix-length"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        string ip = 1 [json_name = "ip"];
                        uint32 prefix_length = 2 [json_name = "prefix-length"];
                        enum Origin {
                           Origin_OTHER = 0;
                           Origin_STATIC = 1;
                           Origin_DHCP = 2;
                           Origin_LINK_LAYER = 3;
                           Origin_RANDOM = 4;
                        };
                        Origin origin = 3 [json_name = "origin"];
                     }
                     State state = 3 [json_name = "state"];
                     message Vrrp {
                        message VrrpGroup {
                           uint32 virtual_router_id = 1 [json_name = "virtual-router-id"];
                           message Config {
                              uint32 virtual_router_id = 1 [json_name = "virtual-router-id"];
                              repeated string virtual_address = 2 [json_name = "virtual-address"];
                              uint32 priority = 3 [json_name = "priority"];
                              bool preempt = 4 [json_name = "preempt"];
                              uint32 preempt_delay = 5 [json_name = "preempt-delay"];
                              bool accept_mode = 6 [json_name = "accept-mode"];
                              uint32 advertisement_interval = 7 [json_name = "advertisement-interval"];
                           }
                           Config config = 2 [json_name = "config"];
                           message State {
                              uint32 virtual_router_id = 1 [json_name = "virtual-router-id"];
                              repeated string virtual_address = 2 [json_name = "virtual-address"];
                              uint32 priority = 3 [json_name = "priority"];
                              bool preempt = 4 [json_name = "preempt"];
                              uint32 preempt_delay = 5 [json_name = "preempt-delay"];
                              bool accept_mode = 6 [json_name = "accept-mode"];
                              uint32 advertisement_interval = 7 [json_name = "advertisement-interval"];
                              uint32 current_priority = 8 [json_name = "current-priority"];
                           }
                           State state = 3 [json_name = "state"];
                           message InterfaceTracking {
                              message Config {
                                 repeated string track_interface = 1 [json_name = "track-interface"];
                                 uint32 priority_decrement = 2 [json_name = "priority-decrement"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 repeated string track_interface = 1 [json_name = "track-interface"];
                                 uint32 priority_decrement = 2 [json_name = "priority-decrement"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           InterfaceTracking interface_tracking = 4 [json_name = "interface-tracking"];
                        }
                        repeated VrrpGroup vrrp_group = 1 [json_name = "vrrp-group"];
                     }
                     Vrrp vrrp = 4 [json_name = "vrrp"];
                  }
                  repeated Address address = 1 [json_name = "address"];
               }
               Addresses addresses = 1 [json_name = "addresses"];
               message ProxyArp {
                  message Config {
                     enum Mode {
                        Mode_DISABLE = 0;
                        Mode_REMOTE_ONLY = 1;
                        Mode_ALL = 2;
                     };
                     Mode mode = 1 [json_name = "mode"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     enum Mode {
                        Mode_DISABLE = 0;
                        Mode_REMOTE_ONLY = 1;
                        Mode_ALL = 2;
                     };
                     Mode mode = 1 [json_name = "mode"];
                  }
                  State state = 2 [json_name = "state"];
               }
               ProxyArp proxy_arp = 2 [json_name = "proxy-arp"];
               message Neighbors {
                  message Neighbor {
                     string ip = 1 [json_name = "ip"];
                     message Config {
                        string ip = 1 [json_name = "ip"];
                        string link_layer_address = 2 [json_name = "link-layer-address"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        string ip = 1 [json_name = "ip"];
                        string link_layer_address = 2 [json_name = "link-layer-address"];
                        enum Origin {
                           Origin_OTHER = 0;
                           Origin_STATIC = 1;
                           Origin_DYNAMIC = 2;
                        };
                        Origin origin = 3 [json_name = "origin"];
                     }
                     State state = 3 [json_name = "state"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 3 [json_name = "neighbors"];
               message Unnumbered {
                  message Config {
                     bool enabled = 1 [json_name = "enabled"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     bool enabled = 1 [json_name = "enabled"];
                  }
                  State state = 2 [json_name = "state"];
                  message InterfaceRef {
                     message Config {
                        string interface9 = 1 [json_name = "interface"];
                        uint32 subinterface9 = 2 [json_name = "subinterface"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string interface9 = 1 [json_name = "interface"];
                        uint32 subinterface9 = 2 [json_name = "subinterface"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  InterfaceRef interface_ref = 3 [json_name = "interface-ref"];
               }
               Unnumbered unnumbered = 4 [json_name = "unnumbered"];
               message Config {
                  bool enabled = 1 [json_name = "enabled"];
                  uint32 mtu = 2 [json_name = "mtu"];
                  bool dhcp_client = 3 [json_name = "dhcp-client"];
               }
               Config config = 5 [json_name = "config"];
               message State {
                  bool enabled = 1 [json_name = "enabled"];
                  uint32 mtu = 2 [json_name = "mtu"];
                  bool dhcp_client = 3 [json_name = "dhcp-client"];
                  message Counters {
                     uint64 in_pkts = 1 [json_name = "in-pkts"];
                     uint64 in_octets = 2 [json_name = "in-octets"];
                     uint64 in_error_pkts = 3 [json_name = "in-error-pkts"];
                     uint64 in_forwarded_pkts = 4 [json_name = "in-forwarded-pkts"];
                     uint64 in_forwarded_octets = 5 [json_name = "in-forwarded-octets"];
                     uint64 in_discarded_pkts = 6 [json_name = "in-discarded-pkts"];
                     uint64 out_pkts = 7 [json_name = "out-pkts"];
                     uint64 out_octets = 8 [json_name = "out-octets"];
                     uint64 out_error_pkts = 9 [json_name = "out-error-pkts"];
                     uint64 out_forwarded_pkts = 10 [json_name = "out-forwarded-pkts"];
                     uint64 out_forwarded_octets = 11 [json_name = "out-forwarded-octets"];
                     uint64 out_discarded_pkts = 12 [json_name = "out-discarded-pkts"];
                  }
                  Counters counters = 4 [json_name = "counters"];
               }
               State state = 6 [json_name = "state"];
            }
            Ipv4 ipv4 = 4 [json_name = "ipv4"];
            message Ipv6 {
               message Addresses {
                  message Address {
                     string ip = 1 [json_name = "ip"];
                     message Config {
                        string ip = 1 [json_name = "ip"];
                        uint32 prefix_length = 2 [json_name = "prefix-length"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        string ip = 1 [json_name = "ip"];
                        uint32 prefix_length = 2 [json_name = "prefix-length"];
                        enum Origin {
                           Origin_OTHER = 0;
                           Origin_STATIC = 1;
                           Origin_DHCP = 2;
                           Origin_LINK_LAYER = 3;
                           Origin_RANDOM = 4;
                        };
                        Origin origin = 3 [json_name = "origin"];
                        enum Status {
                           Status_PREFERRED = 0;
                           Status_DEPRECATED = 1;
                           Status_INVALID = 2;
                           Status_INACCESSIBLE = 3;
                           Status_UNKNOWN = 4;
                           Status_TENTATIVE = 5;
                           Status_DUPLICATE = 6;
                           Status_OPTIMISTIC = 7;
                        };
                        Status status = 4 [json_name = "status"];
                     }
                     State state = 3 [json_name = "state"];
                     message Vrrp {
                        message VrrpGroup {
                           uint32 virtual_router_id = 1 [json_name = "virtual-router-id"];
                           message Config {
                              uint32 virtual_router_id = 1 [json_name = "virtual-router-id"];
                              repeated string virtual_address = 2 [json_name = "virtual-address"];
                              uint32 priority = 3 [json_name = "priority"];
                              bool preempt = 4 [json_name = "preempt"];
                              uint32 preempt_delay = 5 [json_name = "preempt-delay"];
                              bool accept_mode = 6 [json_name = "accept-mode"];
                              uint32 advertisement_interval = 7 [json_name = "advertisement-interval"];
                              string virtual_link_local = 8 [json_name = "virtual-link-local"];
                           }
                           Config config = 2 [json_name = "config"];
                           message State {
                              uint32 virtual_router_id = 1 [json_name = "virtual-router-id"];
                              repeated string virtual_address = 2 [json_name = "virtual-address"];
                              uint32 priority = 3 [json_name = "priority"];
                              bool preempt = 4 [json_name = "preempt"];
                              uint32 preempt_delay = 5 [json_name = "preempt-delay"];
                              bool accept_mode = 6 [json_name = "accept-mode"];
                              uint32 advertisement_interval = 7 [json_name = "advertisement-interval"];
                              uint32 current_priority = 8 [json_name = "current-priority"];
                              string virtual_link_local = 9 [json_name = "virtual-link-local"];
                           }
                           State state = 3 [json_name = "state"];
                           message InterfaceTracking {
                              message Config {
                                 repeated string track_interface = 1 [json_name = "track-interface"];
                                 uint32 priority_decrement = 2 [json_name = "priority-decrement"];
                              }
                              Config config = 1 [json_name = "config"];
                              message State {
                                 repeated string track_interface = 1 [json_name = "track-interface"];
                                 uint32 priority_decrement = 2 [json_name = "priority-decrement"];
                              }
                              State state = 2 [json_name = "state"];
                           }
                           InterfaceTracking interface_tracking = 4 [json_name = "interface-tracking"];
                        }
                        repeated VrrpGroup vrrp_group = 1 [json_name = "vrrp-group"];
                     }
                     Vrrp vrrp = 4 [json_name = "vrrp"];
                  }
                  repeated Address address = 1 [json_name = "address"];
               }
               Addresses addresses = 1 [json_name = "addresses"];
               message RouterAdvertisement {
                  message Config {
                     uint32 interval = 1 [json_name = "interval"];
                     uint32 lifetime = 2 [json_name = "lifetime"];
                     bool suppress = 3 [json_name = "suppress"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     uint32 interval = 1 [json_name = "interval"];
                     uint32 lifetime = 2 [json_name = "lifetime"];
                     bool suppress = 3 [json_name = "suppress"];
                  }
                  State state = 2 [json_name = "state"];
               }
               RouterAdvertisement router_advertisement = 2 [json_name = "router-advertisement"];
               message Neighbors {
                  message Neighbor {
                     string ip = 1 [json_name = "ip"];
                     message Config {
                        string ip = 1 [json_name = "ip"];
                        string link_layer_address = 2 [json_name = "link-layer-address"];
                     }
                     Config config = 2 [json_name = "config"];
                     message State {
                        string ip = 1 [json_name = "ip"];
                        string link_layer_address = 2 [json_name = "link-layer-address"];
                        enum Origin {
                           Origin_OTHER = 0;
                           Origin_STATIC = 1;
                           Origin_DYNAMIC = 2;
                        };
                        Origin origin = 3 [json_name = "origin"];
                        bool is_router = 4 [json_name = "is-router"];
                        enum NeighborState {
                           NeighborState_INCOMPLETE = 0;
                           NeighborState_REACHABLE = 1;
                           NeighborState_STALE = 2;
                           NeighborState_DELAY = 3;
                           NeighborState_PROBE = 4;
                        };
                        NeighborState neighbor_state = 5 [json_name = "neighbor-state"];
                     }
                     State state = 3 [json_name = "state"];
                  }
                  repeated Neighbor neighbor = 1 [json_name = "neighbor"];
               }
               Neighbors neighbors = 3 [json_name = "neighbors"];
               message Unnumbered {
                  message Config {
                     bool enabled = 1 [json_name = "enabled"];
                  }
                  Config config = 1 [json_name = "config"];
                  message State {
                     bool enabled = 1 [json_name = "enabled"];
                  }
                  State state = 2 [json_name = "state"];
                  message InterfaceRef {
                     message Config {
                        string interface9 = 1 [json_name = "interface"];
                        uint32 subinterface9 = 2 [json_name = "subinterface"];
                     }
                     Config config = 1 [json_name = "config"];
                     message State {
                        string interface9 = 1 [json_name = "interface"];
                        uint32 subinterface9 = 2 [json_name = "subinterface"];
                     }
                     State state = 2 [json_name = "state"];
                  }
                  InterfaceRef interface_ref = 3 [json_name = "interface-ref"];
               }
               Unnumbered unnumbered = 4 [json_name = "unnumbered"];
               message Config {
                  bool enabled = 1 [json_name = "enabled"];
                  uint32 mtu = 2 [json_name = "mtu"];
                  uint32 dup_addr_detect_transmits = 3 [json_name = "dup-addr-detect-transmits"];
                  bool dhcp_client = 4 [json_name = "dhcp-client"];
               }
               Config config = 5 [json_name = "config"];
               message State {
                  bool enabled = 1 [json_name = "enabled"];
                  uint32 mtu = 2 [json_name = "mtu"];
                  uint32 dup_addr_detect_transmits = 3 [json_name = "dup-addr-detect-transmits"];
                  bool dhcp_client = 4 [json_name = "dhcp-client"];
                  message Counters {
                     uint64 in_pkts = 1 [json_name = "in-pkts"];
                     uint64 in_octets = 2 [json_name = "in-octets"];
                     uint64 in_error_pkts = 3 [json_name = "in-error-pkts"];
                     uint64 in_forwarded_pkts = 4 [json_name = "in-forwarded-pkts"];
                     uint64 in_forwarded_octets = 5 [json_name = "in-forwarded-octets"];
                     uint64 in_discarded_pkts = 6 [json_name = "in-discarded-pkts"];
                     uint64 out_pkts = 7 [json_name = "out-pkts"];
                     uint64 out_octets = 8 [json_name = "out-octets"];
                     uint64 out_error_pkts = 9 [json_name = "out-error-pkts"];
                     uint64 out_forwarded_pkts = 10 [json_name = "out-forwarded-pkts"];
                     uint64 out_forwarded_octets = 11 [json_name = "out-forwarded-octets"];
                     uint64 out_discarded_pkts = 12 [json_name = "out-discarded-pkts"];
                  }
                  Counters counters = 5 [json_name = "counters"];
               }
               State state = 6 [json_name = "state"];
            }
            Ipv6 ipv6 = 5 [json_name = "ipv6"];
         }
         repeated Subinterface subinterface = 1 [json_name = "subinterface"];
      }
      Subinterfaces subinterfaces = 5 [json_name = "subinterfaces"];
      message Ethernet {
         message Config {
            string mac_address = 1 [json_name = "mac-address"];
            bool auto_negotiate = 2 [json_name = "auto-negotiate"];
            enum DuplexMode {
               DuplexMode_FULL = 0;
               DuplexMode_HALF = 1;
            };
            DuplexMode duplex_mode = 3 [json_name = "duplex-mode"];
            string port_speed = 4 [json_name = "port-speed"];
            bool enable_flow_control = 5 [json_name = "enable-flow-control"];
            string aggregate_id = 6 [json_name = "aggregate-id"];
         }
         Config config = 1 [json_name = "config"];
         message State {
            string mac_address = 1 [json_name = "mac-address"];
            bool auto_negotiate = 2 [json_name = "auto-negotiate"];
            enum DuplexMode {
               DuplexMode_FULL = 0;
               DuplexMode_HALF = 1;
            };
            DuplexMode duplex_mode = 3 [json_name = "duplex-mode"];
            string port_speed = 4 [json_name = "port-speed"];
            bool enable_flow_control = 5 [json_name = "enable-flow-control"];
            string hw_mac_address = 6 [json_name = "hw-mac-address"];
            enum NegotiatedDuplexMode {
               NegotiatedDuplexMode_FULL = 0;
               NegotiatedDuplexMode_HALF = 1;
            };
            NegotiatedDuplexMode negotiated_duplex_mode = 7 [json_name = "negotiated-duplex-mode"];
            string negotiated_port_speed = 8 [json_name = "negotiated-port-speed"];
            message Counters {
               uint64 in_mac_control_frames = 1 [json_name = "in-mac-control-frames"];
               uint64 in_mac_pause_frames = 2 [json_name = "in-mac-pause-frames"];
               uint64 in_oversize_frames = 3 [json_name = "in-oversize-frames"];
               uint64 in_jabber_frames = 4 [json_name = "in-jabber-frames"];
               uint64 in_fragment_frames = 5 [json_name = "in-fragment-frames"];
               uint64 in_8021q_frames = 6 [json_name = "in-8021q-frames"];
               uint64 in_crc_errors = 7 [json_name = "in-crc-errors"];
               uint64 out_mac_control_frames = 8 [json_name = "out-mac-control-frames"];
               uint64 out_mac_pause_frames = 9 [json_name = "out-mac-pause-frames"];
               uint64 out_8021q_frames = 10 [json_name = "out-8021q-frames"];
            }
            Counters counters = 9 [json_name = "counters"];
            string aggregate_id = 10 [json_name = "aggregate-id"];
         }
         State state = 2 [json_name = "state"];
      }
      Ethernet ethernet = 6 [json_name = "ethernet"];
      message Aggregation {
         message Config {
            enum LagType {
               LagType_LACP = 0;
               LagType_STATIC = 1;
            };
            LagType lag_type = 1 [json_name = "lag-type"];
            uint32 min_links = 2 [json_name = "min-links"];
         }
         Config config = 1 [json_name = "config"];
         message State {
            enum LagType {
               LagType_LACP = 0;
               LagType_STATIC = 1;
            };
            LagType lag_type = 1 [json_name = "lag-type"];
            uint32 min_links = 2 [json_name = "min-links"];
            uint32 lag_speed = 3 [json_name = "lag-speed"];
            repeated string member = 4 [json_name = "member"];
         }
         State state = 2 [json_name = "state"];
      }
      Aggregation aggregation = 7 [json_name = "aggregation"];
   }
   repeated Interface interface = 1 [json_name = "interface"];
}

