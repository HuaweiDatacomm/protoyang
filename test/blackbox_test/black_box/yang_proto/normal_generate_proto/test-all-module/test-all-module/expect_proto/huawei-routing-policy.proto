syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-31 10:22:16
// ProtoYang-version 1
// module huawei-routing-policy
// revision 2021-08-11
// revision 2019-04-27
// namespace urn:huawei:yang:huawei-routing-policy

package huawei_routing_policy;

message RoutingPolicy {
   message ExtCommunitySooFilters {
      message ExtCommunitySooFilter {
         string name = 1 [json_name = "name"];
         enum FilterType {
            FilterType_INVALID_ENUM_VALUE = 1;
            FilterType_BASIC = 1;
            FilterType_ADVANCED = 2;
         };
         FilterType filter_type = 2 [json_name = "filter-type"];
         message BasicNodes {
            message BasicNode {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               repeated string community_member = 3 [json_name = "community-member"];
            }
            repeated BasicNode basic_node = 1 [json_name = "basic-node"];
         }
         BasicNodes basic_nodes = 3 [json_name = "basic-nodes"];
         message AdvancedNodes {
            message AdvancedNode {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               string regular = 3 [json_name = "regular"];
            }
            repeated AdvancedNode advanced_node = 1 [json_name = "advanced-node"];
         }
         AdvancedNodes advanced_nodes = 4 [json_name = "advanced-nodes"];
      }
      repeated ExtCommunitySooFilter ext_community_soo_filter = 1 [json_name = "ext-community-soo-filter"];
   }
   ExtCommunitySooFilters ext_community_soo_filters = 1 [json_name = "ext-community-soo-filters"];
   message CommunityFilters {
      message CommunityFilter {
         string name = 1 [json_name = "name"];
         enum FilterType {
            FilterType_INVALID_ENUM_VALUE = 1;
            FilterType_BASIC = 1;
            FilterType_ADVANCED = 2;
         };
         FilterType filter_type = 2 [json_name = "filter-type"];
         message BasicNodes {
            message BasicNode {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               message CommunityMembers {
                  message CommunityMember {
                     string value = 1 [json_name = "value"];
                     bool internet_strict_match = 2 [json_name = "internet-strict-match"];
                  }
                  repeated CommunityMember community_member = 1 [json_name = "community-member"];
               }
               CommunityMembers community_members = 3 [json_name = "community-members"];
            }
            repeated BasicNode basic_node = 1 [json_name = "basic-node"];
         }
         BasicNodes basic_nodes = 3 [json_name = "basic-nodes"];
         message AdvancedNodes {
            message AdvancedNode {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               string regular = 3 [json_name = "regular"];
            }
            repeated AdvancedNode advanced_node = 1 [json_name = "advanced-node"];
         }
         AdvancedNodes advanced_nodes = 4 [json_name = "advanced-nodes"];
      }
      repeated CommunityFilter community_filter = 1 [json_name = "community-filter"];
   }
   CommunityFilters community_filters = 2 [json_name = "community-filters"];
   message ExtCommunityFilters {
      message ExtCommunityFilter {
         string name = 1 [json_name = "name"];
         enum FilterType {
            FilterType_INVALID_ENUM_VALUE = 1;
            FilterType_BASIC = 1;
            FilterType_ADVANCED = 2;
         };
         FilterType filter_type = 2 [json_name = "filter-type"];
         message BasicNodes {
            message BasicNode {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               message ExtCommunityMembers {
                  message ExtCommunityMember {
                     string value = 1 [json_name = "value"];
                  }
                  repeated ExtCommunityMember ext_community_member = 1 [json_name = "ext-community-member"];
               }
               ExtCommunityMembers ext_community_members = 3 [json_name = "ext-community-members"];
            }
            repeated BasicNode basic_node = 1 [json_name = "basic-node"];
         }
         BasicNodes basic_nodes = 3 [json_name = "basic-nodes"];
         message AdvancedNodes {
            message AdvancedNode {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               string regular = 3 [json_name = "regular"];
            }
            repeated AdvancedNode advanced_node = 1 [json_name = "advanced-node"];
         }
         AdvancedNodes advanced_nodes = 4 [json_name = "advanced-nodes"];
      }
      repeated ExtCommunityFilter ext_community_filter = 1 [json_name = "ext-community-filter"];
   }
   ExtCommunityFilters ext_community_filters = 3 [json_name = "ext-community-filters"];
   message Ipv4PrefixFilters {
      message Ipv4PrefixFilter {
         string name = 1 [json_name = "name"];
         string description = 2 [json_name = "description"];
         uint32 permit_count = 3 [json_name = "permit-count"];
         uint32 deny_count = 4 [json_name = "deny-count"];
         message Nodes {
            message Node {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               string ip_address = 3 [json_name = "ip-address"];
               uint32 masklength = 4 [json_name = "masklength"];
               bool match_network = 5 [json_name = "match-network"];
               uint32 masklength_lower = 6 [json_name = "masklength-lower"];
               uint32 masklength_upper = 7 [json_name = "masklength-upper"];
            }
            repeated Node node = 1 [json_name = "node"];
         }
         Nodes nodes = 5 [json_name = "nodes"];
      }
      repeated Ipv4PrefixFilter ipv4_prefix_filter = 1 [json_name = "ipv4-prefix-filter"];
   }
   Ipv4PrefixFilters ipv4_prefix_filters = 4 [json_name = "ipv4-prefix-filters"];
   message Ipv6PrefixFilters {
      message Ipv6PrefixFilter {
         string name = 1 [json_name = "name"];
         string description = 2 [json_name = "description"];
         uint32 permit_count = 3 [json_name = "permit-count"];
         uint32 deny_count = 4 [json_name = "deny-count"];
         message Nodes {
            message Node {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               string ipv6_address = 3 [json_name = "ipv6-address"];
               uint32 masklength = 4 [json_name = "masklength"];
               bool match_network = 5 [json_name = "match-network"];
               uint32 masklength_lower = 6 [json_name = "masklength-lower"];
               uint32 masklength_upper = 7 [json_name = "masklength-upper"];
            }
            repeated Node node = 1 [json_name = "node"];
         }
         Nodes nodes = 5 [json_name = "nodes"];
      }
      repeated Ipv6PrefixFilter ipv6_prefix_filter = 1 [json_name = "ipv6-prefix-filter"];
   }
   Ipv6PrefixFilters ipv6_prefix_filters = 5 [json_name = "ipv6-prefix-filters"];
   message ExtCommunitySegmentedNexthopFilters {
      message ExtCommunitySegmentedNexthopFilter {
         string name = 1 [json_name = "name"];
         enum FilterType {
            FilterType_INVALID_ENUM_VALUE = 1;
            FilterType_BASIC = 1;
            FilterType_ADVANCED = 2;
         };
         FilterType filter_type = 2 [json_name = "filter-type"];
         message BasicNodes {
            message BasicNode {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               message ExtCommunitySegmentedNexthopMembers {
                  message ExtCommunitySegmentedNexthopMember {
                     string value = 1 [json_name = "value"];
                  }
                  repeated ExtCommunitySegmentedNexthopMember ext_community_segmented_nexthop_member = 1 [json_name = "ext-community-segmented-nexthop-member"];
               }
               ExtCommunitySegmentedNexthopMembers ext_community_segmented_nexthop_members = 3 [json_name = "ext-community-segmented-nexthop-members"];
            }
            repeated BasicNode basic_node = 1 [json_name = "basic-node"];
         }
         BasicNodes basic_nodes = 3 [json_name = "basic-nodes"];
         message AdvancedNodes {
            message AdvancedNode {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               string regular = 3 [json_name = "regular"];
            }
            repeated AdvancedNode advanced_node = 1 [json_name = "advanced-node"];
         }
         AdvancedNodes advanced_nodes = 4 [json_name = "advanced-nodes"];
      }
      repeated ExtCommunitySegmentedNexthopFilter ext_community_segmented_nexthop_filter = 1 [json_name = "ext-community-segmented-nexthop-filter"];
   }
   ExtCommunitySegmentedNexthopFilters ext_community_segmented_nexthop_filters = 6 [json_name = "ext-community-segmented-nexthop-filters"];
   message AsPathFilters {
      message AsPathFilter {
         string name = 1 [json_name = "name"];
         message Nodes {
            message Node {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               string regular = 3 [json_name = "regular"];
            }
            repeated Node node = 1 [json_name = "node"];
         }
         Nodes nodes = 2 [json_name = "nodes"];
      }
      repeated AsPathFilter as_path_filter = 1 [json_name = "as-path-filter"];
   }
   AsPathFilters as_path_filters = 7 [json_name = "as-path-filters"];
   message CommunityLists {
      message CommunityList {
         string name = 1 [json_name = "name"];
         repeated string community_member = 2 [json_name = "community-member"];
      }
      repeated CommunityList community_list = 1 [json_name = "community-list"];
   }
   CommunityLists community_lists = 8 [json_name = "community-lists"];
   message RdFilters {
      message RdFilter {
         string name = 1 [json_name = "name"];
         message Nodes {
            message Node {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               message RdStrings {
                  message RdString {
                     string value = 1 [json_name = "value"];
                  }
                  repeated RdString rd_string = 1 [json_name = "rd-string"];
               }
               RdStrings rd_strings = 3 [json_name = "rd-strings"];
            }
            repeated Node node = 1 [json_name = "node"];
         }
         Nodes nodes = 2 [json_name = "nodes"];
      }
      repeated RdFilter rd_filter = 1 [json_name = "rd-filter"];
   }
   RdFilters rd_filters = 9 [json_name = "rd-filters"];
   message VniFilters {
      message VniFilter {
         string name = 1 [json_name = "name"];
         message VniMembers {
            message VniMember {
               uint32 value = 1 [json_name = "value"];
            }
            repeated VniMember vni_member = 1 [json_name = "vni-member"];
         }
         VniMembers vni_members = 2 [json_name = "vni-members"];
      }
      repeated VniFilter vni_filter = 1 [json_name = "vni-filter"];
   }
   VniFilters vni_filters = 10 [json_name = "vni-filters"];
   message MacFilters {
      message MacFilter {
         string name = 1 [json_name = "name"];
         message MacMembers {
            message MacMember {
               string value = 1 [json_name = "value"];
            }
            repeated MacMember mac_member = 1 [json_name = "mac-member"];
         }
         MacMembers mac_members = 2 [json_name = "mac-members"];
      }
      repeated MacFilter mac_filter = 1 [json_name = "mac-filter"];
   }
   MacFilters mac_filters = 11 [json_name = "mac-filters"];
   message EthTagFilters {
      message EthTagFilter {
         string name = 1 [json_name = "name"];
         message EthTagMembers {
            message EthTagMember {
               uint32 value = 1 [json_name = "value"];
            }
            repeated EthTagMember eth_tag_member = 1 [json_name = "eth-tag-member"];
         }
         EthTagMembers eth_tag_members = 2 [json_name = "eth-tag-members"];
      }
      repeated EthTagFilter eth_tag_filter = 1 [json_name = "eth-tag-filter"];
   }
   EthTagFilters eth_tag_filters = 12 [json_name = "eth-tag-filters"];
   message Ipv4PrefixLists {
      message Ipv4PrefixList {
         string name = 1 [json_name = "name"];
         message PrefixMembers {
            message PrefixMember {
               string ip_address = 1 [json_name = "ip-address"];
               uint32 masklength = 2 [json_name = "masklength"];
            }
            repeated PrefixMember prefix_member = 1 [json_name = "prefix-member"];
         }
         PrefixMembers prefix_members = 2 [json_name = "prefix-members"];
      }
      repeated Ipv4PrefixList ipv4_prefix_list = 1 [json_name = "ipv4-prefix-list"];
   }
   Ipv4PrefixLists ipv4_prefix_lists = 13 [json_name = "ipv4-prefix-lists"];
   message Ipv6PrefixLists {
      message Ipv6PrefixList {
         string name = 1 [json_name = "name"];
         message PrefixMembers {
            message PrefixMember {
               string ipv6_address = 1 [json_name = "ipv6-address"];
               uint32 masklength = 2 [json_name = "masklength"];
            }
            repeated PrefixMember prefix_member = 1 [json_name = "prefix-member"];
         }
         PrefixMembers prefix_members = 2 [json_name = "prefix-members"];
      }
      repeated Ipv6PrefixList ipv6_prefix_list = 1 [json_name = "ipv6-prefix-list"];
   }
   Ipv6PrefixLists ipv6_prefix_lists = 14 [json_name = "ipv6-prefix-lists"];
   message LargeCommunityFilters {
      message LargeCommunityFilter {
         string name = 1 [json_name = "name"];
         enum FilterType {
            FilterType_INVALID_ENUM_VALUE = 1;
            FilterType_BASIC = 1;
            FilterType_ADVANCED = 2;
         };
         FilterType filter_type = 2 [json_name = "filter-type"];
         message BasicNodes {
            message BasicNode {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               message LargeCommunityMembers {
                  message LargeCommunityMember {
                     string value = 1 [json_name = "value"];
                  }
                  repeated LargeCommunityMember large_community_member = 1 [json_name = "large-community-member"];
               }
               LargeCommunityMembers large_community_members = 3 [json_name = "large-community-members"];
            }
            repeated BasicNode basic_node = 1 [json_name = "basic-node"];
         }
         BasicNodes basic_nodes = 3 [json_name = "basic-nodes"];
         message AdvancedNodes {
            message AdvancedNode {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               string regular = 3 [json_name = "regular"];
            }
            repeated AdvancedNode advanced_node = 1 [json_name = "advanced-node"];
         }
         AdvancedNodes advanced_nodes = 4 [json_name = "advanced-nodes"];
      }
      repeated LargeCommunityFilter large_community_filter = 1 [json_name = "large-community-filter"];
   }
   LargeCommunityFilters large_community_filters = 15 [json_name = "large-community-filters"];
   message LargeCommunityLists {
      message LargeCommunityList {
         string name = 1 [json_name = "name"];
         message LargeCommunityMembers {
            message LargeCommunityMember {
               string value = 1 [json_name = "value"];
            }
            repeated LargeCommunityMember large_community_member = 1 [json_name = "large-community-member"];
         }
         LargeCommunityMembers large_community_members = 2 [json_name = "large-community-members"];
      }
      repeated LargeCommunityList large_community_list = 1 [json_name = "large-community-list"];
   }
   LargeCommunityLists large_community_lists = 16 [json_name = "large-community-lists"];
   message ExtCommunityEncapsulationFilters {
      message ExtCommunityEncapsulationFilter {
         string name = 1 [json_name = "name"];
         message FilterType_Basic {
            message BasicNodes {
               message BasicNode {
                  uint32 sequence = 1 [json_name = "sequence"];
                  enum MatchMode {
                     MatchMode_PERMIT = 0;
                     MatchMode_DENY = 1;
                  };
                  MatchMode match_mode = 2 [json_name = "match-mode"];
                  repeated string community_member = 3 [json_name = "community-member"];
               }
               repeated BasicNode basic_node = 1 [json_name = "basic-node"];
            }
            BasicNodes basic_nodes = 1 [json_name = "basic-nodes"];
         }
         message FilterType_Advanced {
            message AdvancedNodes {
               message AdvancedNode {
                  uint32 sequence = 1 [json_name = "sequence"];
                  enum MatchMode {
                     MatchMode_PERMIT = 0;
                     MatchMode_DENY = 1;
                  };
                  MatchMode match_mode = 2 [json_name = "match-mode"];
                  string regular = 3 [json_name = "regular"];
               }
               repeated AdvancedNode advanced_node = 1 [json_name = "advanced-node"];
            }
            AdvancedNodes advanced_nodes = 1 [json_name = "advanced-nodes"];
         }
         oneof FilterType {
            FilterType_Basic filter_type_basic = 2 [json_name = "basic"];
            FilterType_Advanced filter_type_advanced = 3 [json_name = "advanced"];
         }
      }
      repeated ExtCommunityEncapsulationFilter ext_community_encapsulation_filter = 1 [json_name = "ext-community-encapsulation-filter"];
   }
   ExtCommunityEncapsulationFilters ext_community_encapsulation_filters = 17 [json_name = "ext-community-encapsulation-filters"];
   message PolicyDefinitions {
      message PolicyDefinition {
         string name = 1 [json_name = "name"];
         bool address_family_mismatch_deny = 2 [json_name = "address-family-mismatch-deny"];
         message Nodes {
            message Node {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               string description = 3 [json_name = "description"];
               uint32 match_count = 4 [json_name = "match-count"];
               message Conditions {
                  message MatchTag {
                     uint32 value = 1 [json_name = "value"];
                  }
                  MatchTag match_tag = 1 [json_name = "match-tag"];
                  message MatchExtCommunitySoo {
                     string ext_community_soo_filter_ref = 1 [json_name = "ext-community-soo-filter-ref"];
                  }
                  MatchExtCommunitySoo match_ext_community_soo = 2 [json_name = "match-ext-community-soo"];
                  message MatchExtCommunityFilters {
                     message MatchExtCommunityFilter {
                        string ext_community_filter_ref = 1 [json_name = "ext-community-filter-ref"];
                     }
                     repeated MatchExtCommunityFilter match_ext_community_filter = 1 [json_name = "match-ext-community-filter"];
                  }
                  MatchExtCommunityFilters match_ext_community_filters = 3 [json_name = "match-ext-community-filters"];
                  message MatchCommunityFilters {
                     message MatchCommunityFilter {
                        string community_filter_ref = 1 [json_name = "community-filter-ref"];
                        message MatchType_WholeMatch {
                           bool whole_match = 1 [json_name = "whole-match"];
                        }
                        message MatchType_SortMatch {
                           bool sort_match = 1 [json_name = "sort-match"];
                        }
                        oneof MatchType {
                           MatchType_WholeMatch match_type_whole_match = 2 [json_name = "whole-match"];
                           MatchType_SortMatch match_type_sort_match = 3 [json_name = "sort-match"];
                        }
                     }
                     repeated MatchCommunityFilter match_community_filter = 1 [json_name = "match-community-filter"];
                  }
                  MatchCommunityFilters match_community_filters = 4 [json_name = "match-community-filters"];
                  message MatchAsPathFilters {
                     message MatchAsPathFilter {
                        string filter_name = 1 [json_name = "filter-name"];
                     }
                     repeated MatchAsPathFilter match_as_path_filter = 1 [json_name = "match-as-path-filter"];
                  }
                  MatchAsPathFilters match_as_path_filters = 5 [json_name = "match-as-path-filters"];
                  message MatchProtocols {
                     message MatchProtocol {
                        enum Protocol {
                           Protocol_INVALID_ENUM_VALUE = 1;
                           Protocol_DIRECT = 1;
                           Protocol_OSPF = 2;
                           Protocol_ISIS = 3;
                           Protocol_STATIC = 4;
                           Protocol_RIP = 5;
                           Protocol_BGP = 6;
                           Protocol_OSPFV3 = 7;
                           Protocol_RIPNG = 8;
                           Protocol_UNR = 11;
                        };
                        Protocol protocol = 1 [json_name = "protocol"];
                     }
                     repeated MatchProtocol match_protocol = 1 [json_name = "match-protocol"];
                  }
                  MatchProtocols match_protocols = 6 [json_name = "match-protocols"];
                  message MatchCost {
                     message CostSet_Value {
                        uint32 value9 = 1 [json_name = "value"];
                     }
                     message CostSet_Range {
                        uint32 lower = 1 [json_name = "lower"];
                        uint32 upper = 2 [json_name = "upper"];
                     }
                     oneof CostSet {
                        CostSet_Value cost_set_value = 1 [json_name = "value"];
                        CostSet_Range cost_set_range = 2 [json_name = "range"];
                     }
                  }
                  MatchCost match_cost = 7 [json_name = "match-cost"];
                  message MatchPreference {
                     uint32 value = 1 [json_name = "value"];
                  }
                  MatchPreference match_preference = 8 [json_name = "match-preference"];
                  message MatchExtCommunitySegmentedNexthopFilter {
                     string ext_community_segmented_nexthop_filter_ref = 1 [json_name = "ext-community-segmented-nexthop-filter-ref"];
                  }
                  MatchExtCommunitySegmentedNexthopFilter match_ext_community_segmented_nexthop_filter = 9 [json_name = "match-ext-community-segmented-nexthop-filter"];
                  message MatchInterfaces {
                     message MatchInterface {
                        string interface_name = 1 [json_name = "interface-name"];
                     }
                     repeated MatchInterface match_interface = 1 [json_name = "match-interface"];
                  }
                  MatchInterfaces match_interfaces = 10 [json_name = "match-interfaces"];
                  message MatchOriginAsValidation {
                     enum OriginAsValidation {
                        OriginAsValidation_INVALID_ENUM_VALUE = 1;
                        OriginAsValidation_VALID = 1;
                        OriginAsValidation_INVALID = 2;
                        OriginAsValidation_NOTX_FOUND = 3;
                     };
                     OriginAsValidation origin_as_validation = 1 [json_name = "origin-as-validation"];
                  }
                  MatchOriginAsValidation match_origin_as_validation = 11 [json_name = "match-origin-as-validation"];
                  message MatchRouteTypes {
                     message MatchRouteType {
                        enum RouteType {
                           RouteType_INVALID_ENUM_VALUE = 1;
                           RouteType_EXTERNAL1 = 1;
                           RouteType_EXTERNAL2 = 2;
                           RouteType_INTERNAL = 4;
                           RouteType_ISISX_LEVEL1 = 5;
                           RouteType_ISISX_LEVEL2 = 6;
                           RouteType_NSSAX_EXTERNAL1 = 7;
                           RouteType_NSSAX_EXTERNAL2 = 8;
                           RouteType_IBGP = 10;
                           RouteType_EBGP = 11;
                           RouteType_MVPN1 = 16;
                           RouteType_MVPN3 = 18;
                           RouteType_EVPNX_AD = 23;
                           RouteType_EVPNX_ES = 24;
                           RouteType_EVPNX_INCLUSIVE = 25;
                           RouteType_EVPNX_JOIN = 26;
                           RouteType_EVPNX_LEAVE = 27;
                           RouteType_EVPNX_MAC = 28;
                           RouteType_EVPNX_PREFIX = 29;
                           RouteType_EVPNX_SMET = 30;
                        };
                        RouteType route_type = 1 [json_name = "route-type"];
                     }
                     repeated MatchRouteType match_route_type = 1 [json_name = "match-route-type"];
                  }
                  MatchRouteTypes match_route_types = 12 [json_name = "match-route-types"];
                  message MatchMplsLabel {
                     bool mpls_label = 1 [json_name = "mpls-label"];
                     bool mpls_label2 = 2 [json_name = "mpls-label2"];
                  }
                  MatchMplsLabel match_mpls_label = 13 [json_name = "match-mpls-label"];
                  message MatchRdFilter {
                     string rd_filter_ref = 1 [json_name = "rd-filter-ref"];
                  }
                  MatchRdFilter match_rd_filter = 14 [json_name = "match-rd-filter"];
                  message MatchMacFilter {
                     string mac_filter_ref = 1 [json_name = "mac-filter-ref"];
                  }
                  MatchMacFilter match_mac_filter = 15 [json_name = "match-mac-filter"];
                  message MatchL3VniFilter {
                     enum MatchType {
                        MatchType_MATCHX_SPECIAL = 0;
                        MatchType_MATCHX_ALL = 1;
                     };
                     MatchType match_type = 1 [json_name = "match-type"];
                     string l3vni_filter_ref = 2 [json_name = "l3vni-filter-ref"];
                  }
                  MatchL3VniFilter match_l3vni_filter = 16 [json_name = "match-l3vni-filter"];
                  message MatchL2VniFilter {
                     enum MatchType {
                        MatchType_MATCHX_SPECIAL = 0;
                        MatchType_MATCHX_ALL = 1;
                     };
                     MatchType match_type = 1 [json_name = "match-type"];
                     string l2vni_filter_ref = 2 [json_name = "l2vni-filter-ref"];
                  }
                  MatchL2VniFilter match_l2vni_filter = 17 [json_name = "match-l2vni-filter"];
                  message MatchEthTagFilter {
                     string eth_tag_filter_ref = 1 [json_name = "eth-tag-filter-ref"];
                  }
                  MatchEthTagFilter match_eth_tag_filter = 18 [json_name = "match-eth-tag-filter"];
                  message MatchLargeCommunityFilters {
                     message MatchLargeCommunityFilter {
                        string community_filter_ref = 1 [json_name = "community-filter-ref"];
                        message MatchType_WholeMatch {
                           bool whole_match = 1 [json_name = "whole-match"];
                        }
                        oneof MatchType {
                           MatchType_WholeMatch match_type_whole_match = 2 [json_name = "whole-match"];
                        }
                     }
                     repeated MatchLargeCommunityFilter match_large_community_filter = 1 [json_name = "match-large-community-filter"];
                  }
                  MatchLargeCommunityFilters match_large_community_filters = 19 [json_name = "match-large-community-filters"];
                  message MatchAsPathLength {
                     message AsPathLengthSet_Value {
                        uint32 value9 = 1 [json_name = "value"];
                     }
                     message AsPathLengthSet_Range {
                        uint32 lower = 1 [json_name = "lower"];
                        uint32 upper = 2 [json_name = "upper"];
                     }
                     oneof AsPathLengthSet {
                        AsPathLengthSet_Value as_path_length_set_value = 1 [json_name = "value"];
                        AsPathLengthSet_Range as_path_length_set_range = 2 [json_name = "range"];
                     }
                  }
                  MatchAsPathLength match_as_path_length = 20 [json_name = "match-as-path-length"];
                  message MatchExtCommunityEncapsulationFilter {
                     string ext_community_encapsulation_list_ref = 1 [json_name = "ext-community-encapsulation-list-ref"];
                  }
                  MatchExtCommunityEncapsulationFilter match_ext_community_encapsulation_filter = 21 [json_name = "match-ext-community-encapsulation-filter"];
                  message MatchIpv4Destination_Ipv4Prefix {
                     message MatchIpv4Prefix {
                        string prefix_filter_ref = 1 [json_name = "prefix-filter-ref"];
                     }
                     MatchIpv4Prefix match_ipv4_prefix = 1 [json_name = "match-ipv4-prefix"];
                  }
                  oneof MatchIpv4Destination {
                     MatchIpv4Destination_Ipv4Prefix match_ipv4_destination_ipv4_prefix = 22 [json_name = "ipv4-prefix"];
                  }
                  message MatchIpv6Destination_Ipv6Prefix {
                     message MatchIpv6Prefix {
                        string prefix_filter_ref = 1 [json_name = "prefix-filter-ref"];
                     }
                     MatchIpv6Prefix match_ipv6_prefix = 1 [json_name = "match-ipv6-prefix"];
                  }
                  oneof MatchIpv6Destination {
                     MatchIpv6Destination_Ipv6Prefix match_ipv6_destination_ipv6_prefix = 23 [json_name = "ipv6-prefix"];
                  }
                  message MatchIpv4Nexthop_Ipv4Prefix {
                     message MatchNexthopIpv4Prefix {
                        string prefix_filter_ref = 1 [json_name = "prefix-filter-ref"];
                     }
                     MatchNexthopIpv4Prefix match_nexthop_ipv4_prefix = 1 [json_name = "match-nexthop-ipv4-prefix"];
                  }
                  oneof MatchIpv4Nexthop {
                     MatchIpv4Nexthop_Ipv4Prefix match_ipv4_nexthop_ipv4_prefix = 24 [json_name = "ipv4-prefix"];
                  }
                  message MatchIpv6Nexthop_Ipv6Prefix {
                     message MatchNexthopIpv6Prefix {
                        string prefix_filter_ref = 1 [json_name = "prefix-filter-ref"];
                     }
                     MatchNexthopIpv6Prefix match_nexthop_ipv6_prefix = 1 [json_name = "match-nexthop-ipv6-prefix"];
                  }
                  oneof MatchIpv6Nexthop {
                     MatchIpv6Nexthop_Ipv6Prefix match_ipv6_nexthop_ipv6_prefix = 25 [json_name = "ipv6-prefix"];
                  }
                  message MatchIpv4RouteSource_Ipv4Prefix {
                     message MatchRouteSourceIpv4Prefix {
                        string prefix_filter_ref = 1 [json_name = "prefix-filter-ref"];
                     }
                     MatchRouteSourceIpv4Prefix match_route_source_ipv4_prefix = 1 [json_name = "match-route-source-ipv4-prefix"];
                  }
                  oneof MatchIpv4RouteSource {
                     MatchIpv4RouteSource_Ipv4Prefix match_ipv4_route_source_ipv4_prefix = 26 [json_name = "ipv4-prefix"];
                  }
                  message MatchIpv6RouteSource_Ipv6Prefix {
                     message MatchRouteSourceIpv6Prefix {
                        string prefix_filter_ref = 1 [json_name = "prefix-filter-ref"];
                     }
                     MatchRouteSourceIpv6Prefix match_route_source_ipv6_prefix = 1 [json_name = "match-route-source-ipv6-prefix"];
                  }
                  oneof MatchIpv6RouteSource {
                     MatchIpv6RouteSource_Ipv6Prefix match_ipv6_route_source_ipv6_prefix = 27 [json_name = "ipv6-prefix"];
                  }
                  message MatchRouteOriginator_Ipv4Prefix {
                     message MatchOriginatorIpv4Prefix {
                        string prefix_filter_ref = 1 [json_name = "prefix-filter-ref"];
                     }
                     MatchOriginatorIpv4Prefix match_originator_ipv4_prefix = 1 [json_name = "match-originator-ipv4-prefix"];
                  }
                  oneof MatchRouteOriginator {
                     MatchRouteOriginator_Ipv4Prefix match_route_originator_ipv4_prefix = 28 [json_name = "ipv4-prefix"];
                  }
                  message MatchGroupAddress_Ipv4Prefix {
                     message MatchGroupAddressIpv4Prefix {
                        string prefix_filter_ref = 1 [json_name = "prefix-filter-ref"];
                     }
                     MatchGroupAddressIpv4Prefix match_group_address_ipv4_prefix = 1 [json_name = "match-group-address-ipv4-prefix"];
                  }
                  oneof MatchGroupAddress {
                     MatchGroupAddress_Ipv4Prefix match_group_address_ipv4_prefix = 29 [json_name = "ipv4-prefix"];
                  }
               }
               Conditions conditions = 5 [json_name = "conditions"];
               message Actions {
                  message ApplyLocalPreference {
                     enum Operation {
                        Operation_REPLACE = 0;
                        Operation_ADD = 1;
                        Operation_SUB = 2;
                     };
                     Operation operation = 1 [json_name = "operation"];
                     uint32 value = 2 [json_name = "value"];
                  }
                  ApplyLocalPreference apply_local_preference = 1 [json_name = "apply-local-preference"];
                  message ApplyCost {
                     enum Operation {
                        Operation_ADD = 0;
                        Operation_SUB = 1;
                        Operation_REPLACE = 2;
                        Operation_NONE = 3;
                        Operation_INHERIT = 4;
                     };
                     Operation operation = 1 [json_name = "operation"];
                     uint32 value = 2 [json_name = "value"];
                  }
                  ApplyCost apply_cost = 2 [json_name = "apply-cost"];
                  message ApplyCommunity {
                     enum Operation {
                        Operation_DELETE = 0;
                        Operation_REPLACE = 1;
                        Operation_ADD = 2;
                     };
                     Operation operation = 1 [json_name = "operation"];
                     message SetCommunity_Inline {
                        repeated string communities = 1 [json_name = "communities"];
                     }
                     message SetCommunity_InlineString {
                        string value = 1 [json_name = "value"];
                     }
                     message SetCommunity_Reference {
                        string community_list_ref = 1 [json_name = "community-list-ref"];
                     }
                     oneof SetCommunity {
                        SetCommunity_Inline set_community_inline = 2 [json_name = "inline"];
                        SetCommunity_InlineString set_community_inline_string = 3 [json_name = "inline-string"];
                        SetCommunity_Reference set_community_reference = 4 [json_name = "reference"];
                     }
                  }
                  ApplyCommunity apply_community = 3 [json_name = "apply-community"];
                  message ApplyExtCommunitySoo {
                     enum Operation {
                        Operation_INVALID_ENUM_VALUE = 2;
                        Operation_ADD = 2;
                     };
                     Operation operation = 1 [json_name = "operation"];
                     repeated string communities = 2 [json_name = "communities"];
                  }
                  ApplyExtCommunitySoo apply_ext_community_soo = 4 [json_name = "apply-ext-community-soo"];
                  message ApplyMplsLabel {
                     bool mpls_label = 1 [json_name = "mpls-label"];
                  }
                  ApplyMplsLabel apply_mpls_label = 5 [json_name = "apply-mpls-label"];
                  message ApplyPreferred {
                     uint32 value = 1 [json_name = "value"];
                  }
                  ApplyPreferred apply_preferred = 6 [json_name = "apply-preferred"];
                  message ApplyAigp {
                     enum Operation {
                        Operation_CONFIG = 0;
                        Operation_INHERITX_COST = 1;
                     };
                     Operation operation = 1 [json_name = "operation"];
                     uint32 value = 2 [json_name = "value"];
                  }
                  ApplyAigp apply_aigp = 7 [json_name = "apply-aigp"];
                  message ApplyTag {
                     uint32 value = 1 [json_name = "value"];
                  }
                  ApplyTag apply_tag = 8 [json_name = "apply-tag"];
                  message ApplyIpv4Nexthop {
                     message Ipv4NexthopSet_Nexthop {
                        string nexthop9 = 1 [json_name = "nexthop"];
                     }
                     message Ipv4NexthopSet_PeerAddress {
                        bool peer_address = 1 [json_name = "peer-address"];
                     }
                     message Ipv4NexthopSet_Blackhole {
                        bool blackhole9 = 1 [json_name = "blackhole"];
                     }
                     oneof Ipv4NexthopSet {
                        Ipv4NexthopSet_Nexthop ipv4_nexthop_set_nexthop = 1 [json_name = "nexthop"];
                        Ipv4NexthopSet_PeerAddress ipv4_nexthop_set_peer_address = 2 [json_name = "peer-address"];
                        Ipv4NexthopSet_Blackhole ipv4_nexthop_set_blackhole = 3 [json_name = "blackhole"];
                     }
                  }
                  ApplyIpv4Nexthop apply_ipv4_nexthop = 9 [json_name = "apply-ipv4-nexthop"];
                  message ApplyIpv6Nexthop {
                     message Ipv6NexthopSet_Ipv6Nexthop {
                        string ipv6_nexthop = 1 [json_name = "ipv6-nexthop"];
                     }
                     message Ipv6NexthopSet_PeerAddress {
                        bool peer_address = 1 [json_name = "peer-address"];
                     }
                     message Ipv6NexthopSet_Blackhole {
                        bool blackhole9 = 1 [json_name = "blackhole"];
                     }
                     oneof Ipv6NexthopSet {
                        Ipv6NexthopSet_Ipv6Nexthop ipv6_nexthop_set_ipv6_nexthop = 1 [json_name = "ipv6-nexthop"];
                        Ipv6NexthopSet_PeerAddress ipv6_nexthop_set_peer_address = 2 [json_name = "peer-address"];
                        Ipv6NexthopSet_Blackhole ipv6_nexthop_set_blackhole = 3 [json_name = "blackhole"];
                     }
                  }
                  ApplyIpv6Nexthop apply_ipv6_nexthop = 10 [json_name = "apply-ipv6-nexthop"];
                  message ApplyCostType {
                     enum Value {
                        Value_EXTERNAL = 0;
                        Value_INTERNAL = 1;
                        Value_TYPEX_1 = 2;
                        Value_TYPEX_2 = 3;
                        Value_INTERNALX_INCX_IBGP = 4;
                        Value_MEDX_PLUSX_IGP = 5;
                        Value_MEDX_INHERITX_AIGP = 6;
                     };
                     Value value = 1 [json_name = "value"];
                  }
                  ApplyCostType apply_cost_type = 11 [json_name = "apply-cost-type"];
                  message ApplyOrigin {
                     enum OriginType {
                        OriginType_EGP = 0;
                        OriginType_IGP = 1;
                        OriginType_INCOMPLETE = 2;
                     };
                     OriginType origin_type = 1 [json_name = "origin-type"];
                     string value = 2 [json_name = "value"];
                  }
                  ApplyOrigin apply_origin = 12 [json_name = "apply-origin"];
                  message ApplyPreference {
                     uint32 value = 1 [json_name = "value"];
                  }
                  ApplyPreference apply_preference = 13 [json_name = "apply-preference"];
                  message ApplyRouteType {
                     enum Value {
                        Value_INVALID_ENUM_VALUE = 1;
                        Value_OSPFX_STUBX_AREA = 1;
                        Value_OSPFX_BACKBONE = 2;
                        Value_ISISX_LEVELX_1 = 3;
                        Value_ISISX_LEVELX_2 = 4;
                        Value_ISISX_LEVELX_12 = 5;
                     };
                     Value value = 1 [json_name = "value"];
                  }
                  ApplyRouteType apply_route_type = 14 [json_name = "apply-route-type"];
                  message ApplyTraffic {
                     uint32 value = 1 [json_name = "value"];
                  }
                  ApplyTraffic apply_traffic = 15 [json_name = "apply-traffic"];
                  message ApplyIpv4Gateway {
                     enum GatewayType {
                        GatewayType_ORIGINX_NEXTHOP = 0;
                        GatewayType_IPX_ADDRESS = 1;
                        GatewayType_NONE = 2;
                     };
                     GatewayType gateway_type = 1 [json_name = "gateway-type"];
                     string address = 2 [json_name = "address"];
                  }
                  ApplyIpv4Gateway apply_ipv4_gateway = 16 [json_name = "apply-ipv4-gateway"];
                  message ApplyIpv6Gateway {
                     enum GatewayType {
                        GatewayType_ORIGINX_NEXTHOP = 0;
                        GatewayType_IPX_ADDRESS = 1;
                        GatewayType_NONE = 2;
                     };
                     GatewayType gateway_type = 1 [json_name = "gateway-type"];
                     string address = 2 [json_name = "address"];
                  }
                  ApplyIpv6Gateway apply_ipv6_gateway = 17 [json_name = "apply-ipv6-gateway"];
                  message ApplyExtCommunity {
                     enum Operation {
                        Operation_INVALID_ENUM_VALUE = 1;
                        Operation_REPLACE = 1;
                        Operation_ADD = 2;
                     };
                     Operation operation = 1 [json_name = "operation"];
                     message ExtCommunityMembers {
                        message ExtCommunityMember {
                           string value = 1 [json_name = "value"];
                        }
                        repeated ExtCommunityMember ext_community_member = 1 [json_name = "ext-community-member"];
                     }
                     ExtCommunityMembers ext_community_members = 2 [json_name = "ext-community-members"];
                  }
                  ApplyExtCommunity apply_ext_community = 18 [json_name = "apply-ext-community"];
                  message ApplyCommunityFilterDelete {
                     string name = 1 [json_name = "name"];
                  }
                  ApplyCommunityFilterDelete apply_community_filter_delete = 19 [json_name = "apply-community-filter-delete"];
                  message ApplyDampening {
                     uint32 half_life_value = 1 [json_name = "half-life-value"];
                     uint32 reuse_value = 2 [json_name = "reuse-value"];
                     uint32 suppress_value = 3 [json_name = "suppress-value"];
                     uint32 ceiling_value = 4 [json_name = "ceiling-value"];
                  }
                  ApplyDampening apply_dampening = 20 [json_name = "apply-dampening"];
                  message ApplyQosParameter {
                     message SetQosParameter_LocalIdIpPrecedence {
                        uint32 qos_local_id = 1 [json_name = "qos-local-id"];
                        uint32 ip_precedence = 2 [json_name = "ip-precedence"];
                     }
                     oneof SetQosParameter {
                        SetQosParameter_LocalIdIpPrecedence set_qos_parameter_local_id_ip_precedence = 1 [json_name = "local-id-ip-precedence"];
                     }
                  }
                  ApplyQosParameter apply_qos_parameter = 21 [json_name = "apply-qos-parameter"];
                  message ApplyAsPath {
                     enum Operation {
                        Operation_DELETE = 0;
                        Operation_REPLACE = 1;
                        Operation_ADDITIVE = 2;
                        Operation_DELETEX_SPECIAL = 3;
                     };
                     Operation operation = 1 [json_name = "operation"];
                     message AsPathString_AsString {
                        string value = 1 [json_name = "value"];
                     }
                     oneof AsPathString {
                        AsPathString_AsString as_path_string_as_string = 2 [json_name = "as-string"];
                     }
                  }
                  ApplyAsPath apply_as_path = 22 [json_name = "apply-as-path"];
                  message ApplyExtCommunityRedirectIp {
                     string value = 1 [json_name = "value"];
                  }
                  ApplyExtCommunityRedirectIp apply_ext_community_redirect_ip = 23 [json_name = "apply-ext-community-redirect-ip"];
                  message ApplyExtCommunityRedirectVpn {
                     string value = 1 [json_name = "value"];
                  }
                  ApplyExtCommunityRedirectVpn apply_ext_community_redirect_vpn = 24 [json_name = "apply-ext-community-redirect-vpn"];
                  message ApplyExtCommunityColor {
                     string value = 1 [json_name = "value"];
                  }
                  ApplyExtCommunityColor apply_ext_community_color = 25 [json_name = "apply-ext-community-color"];
                  message ApplyEntropyLabelNone {
                     bool entropy_label_none = 1 [json_name = "entropy-label-none"];
                  }
                  ApplyEntropyLabelNone apply_entropy_label_none = 26 [json_name = "apply-entropy-label-none"];
                  message ApplyPeerId {
                     uint32 value = 1 [json_name = "value"];
                  }
                  ApplyPeerId apply_peer_id = 27 [json_name = "apply-peer-id"];
                  message ApplyLargeCommunity {
                     enum Operation {
                        Operation_DELETE = 0;
                        Operation_REPLACE = 1;
                        Operation_ADD = 2;
                        Operation_DELETEX_SPECIAL = 3;
                     };
                     Operation operation = 1 [json_name = "operation"];
                     message SetLargeCommunity_Inline {
                        message LargeCommunityMembers {
                           message LargeCommunityMember {
                              string value = 1 [json_name = "value"];
                           }
                           repeated LargeCommunityMember large_community_member = 1 [json_name = "large-community-member"];
                        }
                        LargeCommunityMembers large_community_members = 1 [json_name = "large-community-members"];
                     }
                     message SetLargeCommunity_Reference {
                        string large_community_list_ref = 1 [json_name = "large-community-list-ref"];
                     }
                     oneof SetLargeCommunity {
                        SetLargeCommunity_Inline set_large_community_inline = 2 [json_name = "inline"];
                        SetLargeCommunity_Reference set_large_community_reference = 3 [json_name = "reference"];
                     }
                  }
                  ApplyLargeCommunity apply_large_community = 28 [json_name = "apply-large-community"];
                  message ApplyFlexAlgoId {
                     uint32 value = 1 [json_name = "value"];
                  }
                  ApplyFlexAlgoId apply_flex_algo_id = 29 [json_name = "apply-flex-algo-id"];
                  message ApplyExtCommunityBandwidth {
                     message LinkBandwidthMode_SetBandwidth {
                        enum Operation {
                           Operation_DELETE = 0;
                           Operation_REPLACE = 1;
                        };
                        Operation operation = 1 [json_name = "operation"];
                        string value = 2 [json_name = "value"];
                     }
                     message LinkBandwidthMode_AggregateBandwidth {
                        bool enable = 1 [json_name = "enable"];
                        uint32 limit_bandwidth = 2 [json_name = "limit-bandwidth"];
                     }
                     oneof LinkBandwidthMode {
                        LinkBandwidthMode_SetBandwidth link_bandwidth_mode_set_bandwidth = 1 [json_name = "set-bandwidth"];
                        LinkBandwidthMode_AggregateBandwidth link_bandwidth_mode_aggregate_bandwidth = 2 [json_name = "aggregate-bandwidth"];
                     }
                  }
                  ApplyExtCommunityBandwidth apply_ext_community_bandwidth = 30 [json_name = "apply-ext-community-bandwidth"];
               }
               Actions actions = 6 [json_name = "actions"];
               message NextNodeChoice {
                  bool is_goto_next_node = 1 [json_name = "is-goto-next-node"];
                  int32 next_node_sequence = 2 [json_name = "next-node-sequence"];
               }
               NextNodeChoice next_node_choice = 7 [json_name = "next-node-choice"];
            }
            repeated Node node = 1 [json_name = "node"];
         }
         Nodes nodes = 3 [json_name = "nodes"];
      }
      repeated PolicyDefinition policy_definition = 1 [json_name = "policy-definition"];
   }
   PolicyDefinitions policy_definitions = 18 [json_name = "policy-definitions"];
   message TunnelSelectors {
      message TunnelSelector {
         string name = 1 [json_name = "name"];
         message Nodes {
            message Node {
               uint32 sequence = 1 [json_name = "sequence"];
               enum MatchMode {
                  MatchMode_PERMIT = 0;
                  MatchMode_DENY = 1;
               };
               MatchMode match_mode = 2 [json_name = "match-mode"];
               message Conditions {
                  message MatchRdFilter {
                     string rd_filter_ref = 1 [json_name = "rd-filter-ref"];
                  }
                  MatchRdFilter match_rd_filter = 1 [json_name = "match-rd-filter"];
                  message MatchCommunityFilters {
                     message MatchCommunityFilter {
                        string community_filter_ref = 1 [json_name = "community-filter-ref"];
                        message MatchType_WholeMatch {
                           bool whole_match = 1 [json_name = "whole-match"];
                        }
                        message MatchType_SortMatch {
                           bool sort_match = 1 [json_name = "sort-match"];
                        }
                        oneof MatchType {
                           MatchType_WholeMatch match_type_whole_match = 2 [json_name = "whole-match"];
                           MatchType_SortMatch match_type_sort_match = 3 [json_name = "sort-match"];
                        }
                     }
                     repeated MatchCommunityFilter match_community_filter = 1 [json_name = "match-community-filter"];
                  }
                  MatchCommunityFilters match_community_filters = 2 [json_name = "match-community-filters"];
                  message MatchIpv4Destination_Ipv4Prefix {
                     message MatchIpv4Prefix {
                        string prefix_filter_ref = 1 [json_name = "prefix-filter-ref"];
                     }
                     MatchIpv4Prefix match_ipv4_prefix = 1 [json_name = "match-ipv4-prefix"];
                  }
                  oneof MatchIpv4Destination {
                     MatchIpv4Destination_Ipv4Prefix match_ipv4_destination_ipv4_prefix = 3 [json_name = "ipv4-prefix"];
                  }
                  message MatchIpv4Nexthop_Ipv4Prefix {
                     message MatchNexthopIpv4Prefix {
                        string prefix_filter_ref = 1 [json_name = "prefix-filter-ref"];
                     }
                     MatchNexthopIpv4Prefix match_nexthop_ipv4_prefix = 1 [json_name = "match-nexthop-ipv4-prefix"];
                  }
                  oneof MatchIpv4Nexthop {
                     MatchIpv4Nexthop_Ipv4Prefix match_ipv4_nexthop_ipv4_prefix = 4 [json_name = "ipv4-prefix"];
                  }
                  message MatchIpv6Nexthop_Ipv6Prefix {
                     message MatchNexthopIpv6Prefix {
                        string prefix_filter_ref = 1 [json_name = "prefix-filter-ref"];
                     }
                     MatchNexthopIpv6Prefix match_nexthop_ipv6_prefix = 1 [json_name = "match-nexthop-ipv6-prefix"];
                  }
                  oneof MatchIpv6Nexthop {
                     MatchIpv6Nexthop_Ipv6Prefix match_ipv6_nexthop_ipv6_prefix = 5 [json_name = "ipv6-prefix"];
                  }
               }
               Conditions conditions = 3 [json_name = "conditions"];
               message Actions {
                  message ApplyTunnelPolicy {
                     string tunnel_policy_ref = 1 [json_name = "tunnel-policy-ref"];
                  }
                  ApplyTunnelPolicy apply_tunnel_policy = 1 [json_name = "apply-tunnel-policy"];
                  message ApplySegmentRoutingIpv6 {
                     enum SegmentRoutingIpv6Type {
                        SegmentRoutingIpv6Type_INVALID_ENUM_VALUE = 1;
                        SegmentRoutingIpv6Type_BESTX_EFFORT = 1;
                     };
                     SegmentRoutingIpv6Type segment_routing_ipv6_type = 1 [json_name = "segment-routing-ipv6-type"];
                  }
                  ApplySegmentRoutingIpv6 apply_segment_routing_ipv6 = 2 [json_name = "apply-segment-routing-ipv6"];
               }
               Actions actions = 4 [json_name = "actions"];
            }
            repeated Node node = 1 [json_name = "node"];
         }
         Nodes nodes = 2 [json_name = "nodes"];
      }
      repeated TunnelSelector tunnel_selector = 1 [json_name = "tunnel-selector"];
   }
   TunnelSelectors tunnel_selectors = 19 [json_name = "tunnel-selectors"];
}

