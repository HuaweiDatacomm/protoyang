syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-31 10:22:16
// ProtoYang-version 1
// module huawei-tunnel-management
// revision 2021-08-11
// revision 2020-01-10
// revision 2019-04-27
// namespace urn:huawei:yang:huawei-tunnel-management

package huawei_tunnel_management;

message TunnelManagement {
   message TunnelPolicys {
      message TunnelPolicy {
         string name = 1 [json_name = "name"];
         string description = 2 [json_name = "description"];
         message Ipv4Set {
            message PolicyType_SelectSequences {
               message SelectSequence {
                  uint32 loadbalance = 1 [json_name = "loadbalance"];
                  bool unmix = 2 [json_name = "unmix"];
                  message SelectTunnelTypes {
                     message SelectTunnelType {
                        enum Type {
                           Type_INVALID_ENUM_VALUE = 1;
                           Type_LSP = 1;
                           Type_BGP = 2;
                           Type_CRX_LSP = 3;
                           Type_GRE = 5;
                           Type_TE = 7;
                           Type_SRBEX_LSP = 41;
                           Type_SRX_TE = 47;
                           Type_SRX_TEX_POLICY = 50;
                           Type_FLEXX_ALGOX_LSP = 147;
                           Type_LDP = 255;
                        };
                        Type type = 1 [json_name = "type"];
                     }
                     repeated SelectTunnelType select_tunnel_type = 1 [json_name = "select-tunnel-type"];
                  }
                  SelectTunnelTypes select_tunnel_types = 3 [json_name = "select-tunnel-types"];
               }
               SelectSequence select_sequence = 1 [json_name = "select-sequence"];
            }
            message PolicyType_Binding {
               message Nexthops {
                  message Nexthop {
                     string address = 1 [json_name = "address"];
                     bool down_switch = 2 [json_name = "down-switch"];
                     bool ignore_destination_check = 3 [json_name = "ignore-destination-check"];
                     bool include_ldp = 4 [json_name = "include-ldp"];
                     enum BindType {
                        BindType_TE = 0;
                        BindType_AUTO = 1;
                        BindType_SRX_TEX_POLICYX_GROUP = 2;
                     };
                     BindType bind_type = 5 [json_name = "bind-type"];
                     message TunnelNames {
                        message TunnelName {
                           string name = 1 [json_name = "name"];
                        }
                        repeated TunnelName tunnel_name = 1 [json_name = "tunnel-name"];
                     }
                     TunnelNames tunnel_names = 6 [json_name = "tunnel-names"];
                     message AutoNames {
                        message AutoName {
                           string name = 1 [json_name = "name"];
                        }
                        repeated AutoName auto_name = 1 [json_name = "auto-name"];
                     }
                     AutoNames auto_names = 7 [json_name = "auto-names"];
                  }
                  repeated Nexthop nexthop = 1 [json_name = "nexthop"];
               }
               Nexthops nexthops = 1 [json_name = "nexthops"];
            }
            oneof PolicyType {
               PolicyType_SelectSequences policy_type_select_sequences = 1 [json_name = "select-sequences"];
               PolicyType_Binding policy_type_binding = 2 [json_name = "binding"];
            }
         }
         Ipv4Set ipv4_set = 3 [json_name = "ipv4-set"];
         message Ipv6Set {
            message PolicyType_SelectSequences {
               message SelectSequence {
                  uint32 loadbalance = 1 [json_name = "loadbalance"];
                  bool unmix = 2 [json_name = "unmix"];
                  message SelectTunnelTypes {
                     message SelectTunnelType {
                        enum Type {
                           Type_INVALID_ENUM_VALUE = 52;
                           Type_SRV6X_TEX_POLICY = 52;
                           Type_SRV6X_TEX_POLICYX_GROUP = 55;
                        };
                        Type type = 1 [json_name = "type"];
                     }
                     repeated SelectTunnelType select_tunnel_type = 1 [json_name = "select-tunnel-type"];
                  }
                  SelectTunnelTypes select_tunnel_types = 3 [json_name = "select-tunnel-types"];
               }
               SelectSequence select_sequence = 1 [json_name = "select-sequence"];
            }
            oneof PolicyType {
               PolicyType_SelectSequences policy_type_select_sequences = 1 [json_name = "select-sequences"];
            }
         }
         Ipv6Set ipv6_set = 4 [json_name = "ipv6-set"];
      }
      repeated TunnelPolicy tunnel_policy = 1 [json_name = "tunnel-policy"];
   }
   TunnelPolicys tunnel_policys = 1 [json_name = "tunnel-policys"];
   message TunnelDownSwitch {
      bool enable = 1 [json_name = "enable"];
   }
   TunnelDownSwitch tunnel_down_switch = 2 [json_name = "tunnel-down-switch"];
   message TunnelInfos {
      message TunnelInfo {
         string id = 1 [json_name = "id"];
         string name = 2 [json_name = "name"];
         enum Type {
            Type_INVALID = 0;
            Type_LDP = 1;
            Type_BGP = 2;
            Type_TE = 3;
            Type_STATICX_LSP = 4;
            Type_GRE = 5;
            Type_UNI = 6;
            Type_TNLX_GROUP = 7;
            Type_SUBX_TE = 8;
            Type_SUBX_GROUP = 9;
            Type_X_6OVER4 = 10;
            Type_X_6TO4 = 11;
            Type_MPLSX_LOCALX_IFNET = 12;
            Type_LDP6 = 13;
            Type_NVGRE = 15;
            Type_P2MPX_LDP = 16;
            Type_VXLAN = 23;
            Type_IPSEC = 24;
            Type_P2MPX_TE = 32;
            Type_VXLANX_NVO3 = 39;
            Type_GRE6 = 40;
            Type_SRBEX_LSP = 41;
            Type_VXLAN6X_NVO3 = 42;
            Type_SRV6 = 43;
            Type_X_4OVER6 = 44;
            Type_X_6RD = 45;
            Type_SRX_TE = 47;
            Type_SRX_TEX_POLICY = 50;
            Type_SRX_TEX_POLICYX_GROUP = 51;
            Type_SRV6X_TEX_POLICY = 52;
            Type_SRV6X_TEX_POLICYX_GROUP = 55;
            Type_SDX_WAN = 56;
            Type_P2MPX_GRE = 64;
            Type_FLEXX_ALGOX_LSP = 147;
            Type_LDPX_LSP = 255;
         };
         Type type = 3 [json_name = "type"];
         string destination = 4 [json_name = "destination"];
         enum Status {
            Status_INVALID_ENUM_VALUE = 1;
            Status_UP = 1;
            Status_DOWN = 2;
         };
         Status status = 5 [json_name = "status"];
         uint32 cost = 6 [json_name = "cost"];
         uint32 sr_te_policy_color = 7 [json_name = "sr-te-policy-color"];
         uint32 sr_te_policy_group = 8 [json_name = "sr-te-policy-group"];
         message ColorType_Color {
            repeated uint32 color5 = 1 [json_name = "color"];
         }
         message ColorType_ColorPriority {
            message ColorPrioritys {
               message ColorPriority6 {
                  uint32 color = 1 [json_name = "color"];
                  uint32 priority = 2 [json_name = "priority"];
               }
               repeated ColorPriority6 color_priority = 1 [json_name = "color-priority"];
            }
            ColorPrioritys color_prioritys = 1 [json_name = "color-prioritys"];
         }
         oneof ColorType {
            ColorType_Color color_type_color = 9 [json_name = "color"];
            ColorType_ColorPriority color_type_color_priority = 10 [json_name = "color-priority"];
         }
      }
      repeated TunnelInfo tunnel_info = 1 [json_name = "tunnel-info"];
   }
   TunnelInfos tunnel_infos = 3 [json_name = "tunnel-infos"];
   message SubscribeTunnelPolicys {
      message SubscribeTunnelPolicy {
         string policy_name = 1 [json_name = "policy-name"];
         enum PolicyExist {
            PolicyExist_INVALID_ENUM_VALUE = 1;
            PolicyExist_TRUE = 1;
            PolicyExist_FALSE = 2;
         };
         PolicyExist policy_exist = 2 [json_name = "policy-exist"];
         uint32 count = 3 [json_name = "count"];
      }
      repeated SubscribeTunnelPolicy subscribe_tunnel_policy = 1 [json_name = "subscribe-tunnel-policy"];
   }
   SubscribeTunnelPolicys subscribe_tunnel_policys = 4 [json_name = "subscribe-tunnel-policys"];
   message TunnelStatisticss {
      message TunnelStatistics {
         enum Type {
            Type_INVALID = 0;
            Type_LDP = 1;
            Type_BGP = 2;
            Type_TE = 3;
            Type_STATICX_LSP = 4;
            Type_GRE = 5;
            Type_UNI = 6;
            Type_TNLX_GROUP = 7;
            Type_SUBX_TE = 8;
            Type_SUBX_GROUP = 9;
            Type_X_6OVER4 = 10;
            Type_X_6TO4 = 11;
            Type_MPLSX_LOCALX_IFNET = 12;
            Type_LDP6 = 13;
            Type_NVGRE = 15;
            Type_P2MPX_LDP = 16;
            Type_VXLAN = 23;
            Type_IPSEC = 24;
            Type_P2MPX_TE = 32;
            Type_VXLANX_NVO3 = 39;
            Type_GRE6 = 40;
            Type_SRBEX_LSP = 41;
            Type_VXLAN6X_NVO3 = 42;
            Type_SRV6 = 43;
            Type_X_4OVER6 = 44;
            Type_X_6RD = 45;
            Type_SRX_TE = 47;
            Type_SRX_TEX_POLICY = 50;
            Type_SRX_TEX_POLICYX_GROUP = 51;
            Type_SRV6X_TEX_POLICY = 52;
            Type_SRV6X_TEX_POLICYX_GROUP = 55;
            Type_SDX_WAN = 56;
            Type_P2MPX_GRE = 64;
            Type_FLEXX_ALGOX_LSP = 147;
            Type_LDPX_LSP = 255;
         };
         Type type = 1 [json_name = "type"];
         uint32 number4 = 2 [json_name = "number"];
      }
      repeated TunnelStatistics tunnel_statistics = 1 [json_name = "tunnel-statistics"];
   }
   TunnelStatisticss tunnel_statisticss = 5 [json_name = "tunnel-statisticss"];
}

