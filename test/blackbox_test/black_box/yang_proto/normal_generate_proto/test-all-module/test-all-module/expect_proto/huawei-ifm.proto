syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2021-08-31 10:22:16
// ProtoYang-version 1
// module huawei-ifm
// revision 2021-01-25
// revision 2020-06-10
// revision 2020-02-15
// revision 2020-01-20
// revision 2020-01-15
// revision 2020-01-10
// revision 2019-09-29
// revision 2019-08-22
// revision 2019-04-15
// revision 2019-04-10
// namespace urn:huawei:yang:huawei-ifm

package huawei_ifm;

message Ifm {
   message Global {
      uint32 statistic_interval = 1 [json_name = "statistic-interval"];
      bool ipv4_ignore_primary_sub = 2 [json_name = "ipv4-ignore-primary-sub"];
      message Ipv4ConflictEnable {
         bool preempt_enable = 1 [json_name = "preempt-enable"];
      }
      Ipv4ConflictEnable ipv4_conflict_enable = 3 [json_name = "ipv4-conflict-enable"];
      message Ipv6ConflictEnable {
         bool preempt_enable = 1 [json_name = "preempt-enable"];
      }
      Ipv6ConflictEnable ipv6_conflict_enable = 4 [json_name = "ipv6-conflict-enable"];
   }
   Global global = 1 [json_name = "global"];
   message Damp {
      bool tx_off = 1 [json_name = "tx-off"];
      message Level_Auto {
         message Auto4 {
            enum Level {
               Level_LIGHT = 0;
               Level_MIDDLE = 1;
               Level_HEAVY = 2;
            };
            Level level = 1 [json_name = "level"];
         }
         Auto4 auto4 = 1 [json_name = "auto"];
      }
      message Level_Manual {
         message Manual4 {
            uint32 suppress = 1 [json_name = "suppress"];
            uint32 reuse = 2 [json_name = "reuse"];
            uint32 max_suppress_time = 3 [json_name = "max-suppress-time"];
            uint32 half_life_period = 4 [json_name = "half-life-period"];
         }
         Manual4 manual4 = 1 [json_name = "manual"];
      }
      oneof Level {
         Level_Auto level_auto = 2 [json_name = "auto"];
         Level_Manual level_manual = 3 [json_name = "manual"];
      }
   }
   Damp damp = 2 [json_name = "damp"];
   message AutoRecoveryTimes {
      message AutoRecoveryTime {
         enum ErrorDownType {
            ErrorDownType_BPDUX_PROTECTION = 0;
            ErrorDownType_AUTOX_DEFEND = 1;
            ErrorDownType_MONITORX_LINK = 2;
            ErrorDownType_PORTSECX_REACHEDX_LIMIT = 65;
            ErrorDownType_STORMX_CONTROL = 66;
            ErrorDownType_LOOPBACKX_DETECT = 67;
            ErrorDownType_DUALX_ACTIVE = 68;
            ErrorDownType_MACX_ADDRESSX_FLAPPING = 69;
            ErrorDownType_NOX_STACKX_LINK = 70;
            ErrorDownType_CRCX_STATISTICS = 71;
            ErrorDownType_TRANSCEIVERX_POWERX_LOW = 72;
            ErrorDownType_LINKX_FLAP = 73;
            ErrorDownType_L2X_LOOPX_OCCURED = 74;
            ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT = 75;
            ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT = 76;
            ErrorDownType_RESOURCEX_MISMATCH = 77;
            ErrorDownType_LEAFX_MSTP = 78;
            ErrorDownType_MX_LAG = 79;
            ErrorDownType_FABRICX_UPLINKX_THRESHOLD = 80;
            ErrorDownType_STACKX_CONFIGX_CONFLICT = 81;
            ErrorDownType_SPINEX_TYPEX_UNSUPPORTED = 82;
            ErrorDownType_STACKX_PACKETX_DEFENSIVE = 83;
            ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED = 85;
            ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED = 86;
            ErrorDownType_FABRICX_LINKX_FAILURE = 87;
            ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK = 88;
            ErrorDownType_PFCX_DEADLOCK = 89;
         };
         ErrorDownType error_down_type = 1 [json_name = "error-down-type"];
         uint32 time_value = 2 [json_name = "time-value"];
      }
      repeated AutoRecoveryTime auto_recovery_time = 1 [json_name = "auto-recovery-time"];
   }
   AutoRecoveryTimes auto_recovery_times = 3 [json_name = "auto-recovery-times"];
   message Interfaces {
      message Interface {
         string name = 1 [json_name = "name"];
         enum Class {
            Class_MAINX_INTERFACE = 0;
            Class_SUBX_INTERFACE = 1;
         };
         Class class = 2 [json_name = "class"];
         enum Type {
            Type_ETHERNET = 0;
            Type_GIGABITETHERNET = 2;
            Type_ETHX_TRUNK = 4;
            Type_IPX_TRUNK = 5;
            Type_VIRTUALX_ETHERNET = 6;
            Type_SERIAL = 8;
            Type_POS = 9;
            Type_CPOS = 10;
            Type_ATM = 11;
            Type_TUNNEL = 14;
            Type_VLANIF = 15;
            Type_NULL = 18;
            Type_LOOPBACK = 19;
            Type_X_100GE = 20;
            Type_LMPIF = 21;
            Type_MTUNNEL = 22;
            Type_X_40GE = 23;
            Type_X_10GE = 24;
            Type_GEBRIEF = 25;
            Type_METH = 26;
            Type_STACKX_PORT = 27;
            Type_SIP = 28;
            Type_E1 = 30;
            Type_MPX_GROUP = 31;
            Type_IMAX_GROUP = 32;
            Type_VMETH = 33;
            Type_REMOTEX_AP = 35;
            Type_VBRIDGE = 36;
            Type_ATMX_BUNDLE = 37;
            Type_FIBERX_CHANNEL = 38;
            Type_INFINIBAND = 39;
            Type_VBDIF = 40;
            Type_T1 = 41;
            Type_T3 = 42;
            Type_VC4 = 43;
            Type_VC12 = 44;
            Type_GLOBALX_VE = 45;
            Type_FABRICX_PORT = 46;
            Type_E3 = 48;
            Type_VP = 49;
            Type_DCNINTERFACE = 50;
            Type_CPOSX_TRUNK = 51;
            Type_TRUNKX_SERIAL = 52;
            Type_GLOBALX_MPX_GROUP = 53;
            Type_OTN = 55;
            Type_GLOBALX_IMAX_GROUP = 57;
            Type_POSX_TRUNK = 59;
            Type_GMPLSX_UNI = 63;
            Type_WDM = 64;
            Type_NVE = 65;
            Type_FCOEX_PORT = 67;
            Type_VIRTUALX_TEMPLATE = 68;
            Type_FC = 70;
            Type_X_4X10GE = 71;
            Type_X_10X10GE = 72;
            Type_X_3X40GE = 73;
            Type_X_4X25GE = 74;
            Type_X_25GE = 75;
            Type_IMETH = 79;
            Type_PWX_VE = 88;
            Type_VXX_TUNNEL = 89;
            Type_SERVICEIF = 90;
            Type_XGIGABITETHERNET = 91;
            Type_X_200GE = 92;
            Type_VIRTUALX_ODUK = 94;
            Type_FLEXE = 95;
            Type_FLEXEX_200GE = 96;
            Type_X_50X_100GE = 101;
            Type_X_50GE = 102;
            Type_FLEXEX_50G = 103;
            Type_FLEXEX_100G = 104;
            Type_FLEXEX_50X_100G = 105;
            Type_VIRTUALX_SERIAL = 107;
            Type_X_400GE = 108;
            Type_HPGE = 114;
            Type_FLEXEX_400G = 115;
            Type_VIRTUALX_IF = 116;
            Type_CELLULAR = 117;
            Type_MULTIGE = 124;
            Type_FLEXEX_10G = 125;
            Type_OPTICALAMPLIFIER = 126;
         };
         Type type = 3 [json_name = "type"];
         string parent_name = 4 [json_name = "parent-name"];
         string number4 = 5 [json_name = "number"];
         string description = 6 [json_name = "description"];
         enum AdminStatus {
            AdminStatus_DOWN = 0;
            AdminStatus_UP = 1;
         };
         AdminStatus admin_status = 7 [json_name = "admin-status"];
         enum LinkProtocol {
            LinkProtocol_ETHERNET = 0;
            LinkProtocol_PPP = 1;
            LinkProtocol_HDLC = 2;
            LinkProtocol_FR = 3;
            LinkProtocol_ATM = 6;
            LinkProtocol_TDM = 7;
         };
         LinkProtocol link_protocol = 8 [json_name = "link-protocol"];
         enum RouterType {
            RouterType_PTOP = 0;
            RouterType_PTOMP = 1;
            RouterType_BROADCAST = 2;
            RouterType_NBMA = 3;
            RouterType_INVALID = 255;
         };
         RouterType router_type = 9 [json_name = "router-type"];
         bool clear_ip_df = 10 [json_name = "clear-ip-df"];
         bool link_up_down_trap_enable = 11 [json_name = "link-up-down-trap-enable"];
         bool statistic_enable = 12 [json_name = "statistic-enable"];
         enum StatisticMode {
            StatisticMode_INVALID_ENUM_VALUE = 1;
            StatisticMode_INTERFACEX_BASED = 1;
            StatisticMode_VLANX_GROUPX_BASED = 2;
         };
         StatisticMode statistic_mode = 13 [json_name = "statistic-mode"];
         message BandwidthType_BandwidthMbps {
            uint32 bandwidth = 1 [json_name = "bandwidth"];
         }
         message BandwidthType_BandwidthKbps {
            uint32 bandwidth_kbps = 1 [json_name = "bandwidth-kbps"];
         }
         oneof BandwidthType {
            BandwidthType_BandwidthMbps bandwidth_type_bandwidth_mbps = 14 [json_name = "bandwidth-mbps"];
            BandwidthType_BandwidthKbps bandwidth_type_bandwidth_kbps = 15 [json_name = "bandwidth-kbps"];
         }
         uint32 mtu = 16 [json_name = "mtu"];
         bool spread_mtu_flag = 17 [json_name = "spread-mtu-flag"];
         uint32 statistic_interval = 18 [json_name = "statistic-interval"];
         string vrf_name = 19 [json_name = "vrf-name"];
         bool l2_mode_enable = 20 [json_name = "l2-mode-enable"];
         uint32 down_delay_time = 21 [json_name = "down-delay-time"];
         string mac_address = 22 [json_name = "mac-address"];
         uint32 index = 23 [json_name = "index"];
         string position = 24 [json_name = "position"];
         string aggregation_name = 25 [json_name = "aggregation-name"];
         bool is_l2_switch = 26 [json_name = "is-l2-switch"];
         string vs_name = 27 [json_name = "vs-name"];
         uint32 l2_switch_port_index = 28 [json_name = "l2-switch-port-index"];
         enum ServiceType {
            ServiceType_NONE = 0;
            ServiceType_TRUNKX_MEMBER = 2;
            ServiceType_STACKX_MEMBER = 6;
            ServiceType_MPX_MEMBER = 7;
            ServiceType_VBRIDGEX_MEMBER = 8;
            ServiceType_IMAX_MEMBER = 9;
            ServiceType_BUNDLEX_MEMBER = 10;
            ServiceType_FABRICX_MEMBER = 11;
            ServiceType_LAGX_MASTERX_MEMBER = 12;
            ServiceType_LAGX_SLAVEX_MEMBER = 13;
            ServiceType_CPOSX_TRUNKX_MEMBER = 15;
            ServiceType_POSX_TRUNKX_MEMBER = 16;
            ServiceType_GLOBALX_MPX_MEMBER = 17;
            ServiceType_GLOBALX_IMAX_MEMBER = 18;
         };
         ServiceType service_type = 29 [json_name = "service-type"];
         enum EncapsulationType {
            EncapsulationType_VLANX_TYPE = 0;
            EncapsulationType_DOT1Q = 1;
            EncapsulationType_QINQ = 2;
            EncapsulationType_P2P = 3;
            EncapsulationType_P2MP = 4;
            EncapsulationType_L2VE = 5;
            EncapsulationType_L3VE = 6;
            EncapsulationType_VLANX_TYPEX_POLICY = 7;
            EncapsulationType_DOT1QX_POLICY = 8;
            EncapsulationType_STACKINGX_POLICY = 9;
            EncapsulationType_UNTAGX_POLICY = 10;
            EncapsulationType_QINQX_MAPPING = 11;
            EncapsulationType_L2VC = 12;
            EncapsulationType_L3VC = 13;
            EncapsulationType_EVCX_UNTAG = 14;
            EncapsulationType_EVCX_DOT1Q = 15;
            EncapsulationType_EVCX_QINQ = 16;
            EncapsulationType_EVCX_DEFAULT = 17;
            EncapsulationType_EVCX_DOT1QX_POLICY = 18;
            EncapsulationType_IETF = 19;
            EncapsulationType_NONSTANDARD = 20;
            EncapsulationType_USERX_VLAN = 21;
            EncapsulationType_USERX_VLANX_ANYOTHER = 22;
            EncapsulationType_QINX_LINK = 23;
            EncapsulationType_SOFTX_GREX_VE = 24;
            EncapsulationType_L3VEX_TER = 25;
            EncapsulationType_L3VEX_ACC = 26;
            EncapsulationType_INVALID = 255;
         };
         EncapsulationType encapsulation_type = 30 [json_name = "encapsulation-type"];
         message ControlFlap {
            uint32 suppress = 1 [json_name = "suppress"];
            uint32 reuse = 2 [json_name = "reuse"];
            uint32 ceiling = 3 [json_name = "ceiling"];
            uint32 decay_ok = 4 [json_name = "decay-ok"];
            uint32 decay_ng = 5 [json_name = "decay-ng"];
            uint32 control_flap_count = 6 [json_name = "control-flap-count"];
         }
         ControlFlap control_flap = 31 [json_name = "control-flap"];
         message TrapThreshold {
            uint32 input_rising_rate = 1 [json_name = "input-rising-rate"];
            uint32 input_resume_rate = 2 [json_name = "input-resume-rate"];
            uint32 output_rising_rate = 3 [json_name = "output-rising-rate"];
            uint32 output_resume_rate = 4 [json_name = "output-resume-rate"];
         }
         TrapThreshold trap_threshold = 32 [json_name = "trap-threshold"];
         message Damping_IgnoreDamp {
            message IgnoreDamp5 {
               bool ignore_global_damp = 1 [json_name = "ignore-global-damp"];
            }
            IgnoreDamp5 ignore_damp = 1 [json_name = "ignore-damp"];
         }
         message Damping_Damp {
            message Damp5 {
               bool tx_off = 1 [json_name = "tx-off"];
               message Level_Auto {
                  message Auto7 {
                     enum Level {
                        Level_LIGHT = 0;
                        Level_MIDDLE = 1;
                        Level_HEAVY = 2;
                     };
                     Level level = 1 [json_name = "level"];
                  }
                  Auto7 auto7 = 1 [json_name = "auto"];
               }
               message Level_Manual {
                  message Manual7 {
                     uint32 suppress = 1 [json_name = "suppress"];
                     uint32 reuse = 2 [json_name = "reuse"];
                     uint32 max_suppress_time = 3 [json_name = "max-suppress-time"];
                     uint32 half_life_period = 4 [json_name = "half-life-period"];
                  }
                  Manual7 manual7 = 1 [json_name = "manual"];
               }
               oneof Level {
                  Level_Auto level_auto = 2 [json_name = "auto"];
                  Level_Manual level_manual = 3 [json_name = "manual"];
               }
            }
            Damp5 damp5 = 1 [json_name = "damp"];
         }
         oneof Damping {
            Damping_IgnoreDamp damping_ignore_damp = 33 [json_name = "ignore-damp"];
            Damping_Damp damping_damp = 34 [json_name = "damp"];
         }
         message DampState {
            enum SuppressStatus {
               SuppressStatus_SUPPRESSED = 0;
               SuppressStatus_UNSUPPRESSED = 1;
            };
            SuppressStatus suppress_status = 1 [json_name = "suppress-status"];
            uint32 suppress = 2 [json_name = "suppress"];
            uint32 reuse = 3 [json_name = "reuse"];
            uint32 max_suppress_time = 4 [json_name = "max-suppress-time"];
            uint32 half_life_period = 5 [json_name = "half-life-period"];
            uint32 damp_reuse_time = 6 [json_name = "damp-reuse-time"];
            uint32 current_penalty = 7 [json_name = "current-penalty"];
            uint32 max_penalty = 8 [json_name = "max-penalty"];
         }
         DampState damp_state = 35 [json_name = "damp-state"];
         message Dynamic {
            enum OperStatus {
               OperStatus_DOWN = 0;
               OperStatus_UP = 1;
            };
            OperStatus oper_status = 1 [json_name = "oper-status"];
            enum PhysicalStatus {
               PhysicalStatus_DOWN = 0;
               PhysicalStatus_UP = 1;
            };
            PhysicalStatus physical_status = 2 [json_name = "physical-status"];
            enum LinkStatus {
               LinkStatus_DOWN = 0;
               LinkStatus_UP = 1;
            };
            LinkStatus link_status = 3 [json_name = "link-status"];
            uint32 mtu = 4 [json_name = "mtu"];
            uint64 bandwidth = 5 [json_name = "bandwidth"];
            enum Ipv4Status {
               Ipv4Status_DOWN = 0;
               Ipv4Status_UP = 1;
            };
            Ipv4Status ipv4_status = 6 [json_name = "ipv4-status"];
            enum Ipv6Status {
               Ipv6Status_DOWN = 0;
               Ipv6Status_UP = 1;
            };
            Ipv6Status ipv6_status = 7 [json_name = "ipv6-status"];
            bool is_control_flap_damp = 8 [json_name = "is-control-flap-damp"];
            string mac_address = 9 [json_name = "mac-address"];
            string line_protocol_up_time = 10 [json_name = "line-protocol-up-time"];
            bool is_offline = 11 [json_name = "is-offline"];
            enum LinkQualityGrade {
               LinkQualityGrade_GOOD = 0;
               LinkQualityGrade_HIGH = 1;
               LinkQualityGrade_MIDDLE = 2;
               LinkQualityGrade_LOW = 4;
            };
            LinkQualityGrade link_quality_grade = 12 [json_name = "link-quality-grade"];
         }
         Dynamic dynamic = 36 [json_name = "dynamic"];
         message MibStatistics {
            uint64 receive_byte = 1 [json_name = "receive-byte"];
            uint64 send_byte = 2 [json_name = "send-byte"];
            uint64 receive_packet = 3 [json_name = "receive-packet"];
            uint64 send_packet = 4 [json_name = "send-packet"];
            uint64 receive_unicast_packet = 5 [json_name = "receive-unicast-packet"];
            uint64 receive_multicast_packet = 6 [json_name = "receive-multicast-packet"];
            uint64 receive_broad_packet = 7 [json_name = "receive-broad-packet"];
            uint64 send_unicast_packet = 8 [json_name = "send-unicast-packet"];
            uint64 send_multicast_packet = 9 [json_name = "send-multicast-packet"];
            uint64 send_broad_packet = 10 [json_name = "send-broad-packet"];
            uint64 receive_error_packet = 11 [json_name = "receive-error-packet"];
            uint64 receive_drop_packet = 12 [json_name = "receive-drop-packet"];
            uint64 send_error_packet = 13 [json_name = "send-error-packet"];
            uint64 send_drop_packet = 14 [json_name = "send-drop-packet"];
         }
         MibStatistics mib_statistics = 37 [json_name = "mib-statistics"];
         message CommonStatistics {
            uint32 stati_interval = 1 [json_name = "stati-interval"];
            uint64 in_byte_rate = 2 [json_name = "in-byte-rate"];
            uint64 in_bit_rate = 3 [json_name = "in-bit-rate"];
            uint64 in_packet_rate = 4 [json_name = "in-packet-rate"];
            string in_use_rate = 5 [json_name = "in-use-rate"];
            uint64 out_byte_rate = 6 [json_name = "out-byte-rate"];
            uint64 out_bit_rate = 7 [json_name = "out-bit-rate"];
            uint64 out_packet_rate = 8 [json_name = "out-packet-rate"];
            string out_use_rate = 9 [json_name = "out-use-rate"];
            uint64 receive_byte = 10 [json_name = "receive-byte"];
            uint64 send_byte = 11 [json_name = "send-byte"];
            uint64 receive_packet = 12 [json_name = "receive-packet"];
            uint64 send_packet = 13 [json_name = "send-packet"];
            uint64 receive_unicast_packet = 14 [json_name = "receive-unicast-packet"];
            uint64 receive_multicast_packet = 15 [json_name = "receive-multicast-packet"];
            uint64 receive_broad_packet = 16 [json_name = "receive-broad-packet"];
            uint64 send_unicast_packet = 17 [json_name = "send-unicast-packet"];
            uint64 send_multicast_packet = 18 [json_name = "send-multicast-packet"];
            uint64 send_broad_packet = 19 [json_name = "send-broad-packet"];
            uint64 receive_error_packet = 20 [json_name = "receive-error-packet"];
            uint64 receive_drop_packet = 21 [json_name = "receive-drop-packet"];
            uint64 send_error_packet = 22 [json_name = "send-error-packet"];
            uint64 send_drop_packet = 23 [json_name = "send-drop-packet"];
            uint64 send_unicast_bit = 24 [json_name = "send-unicast-bit"];
            uint64 receive_unicast_bit = 25 [json_name = "receive-unicast-bit"];
            uint64 send_multicast_bit = 26 [json_name = "send-multicast-bit"];
            uint64 receive_multicast_bit = 27 [json_name = "receive-multicast-bit"];
            uint64 send_broad_bit = 28 [json_name = "send-broad-bit"];
            uint64 receive_broad_bit = 29 [json_name = "receive-broad-bit"];
            uint64 send_unicast_bit_rate = 30 [json_name = "send-unicast-bit-rate"];
            uint64 receive_unicast_bit_rate = 31 [json_name = "receive-unicast-bit-rate"];
            uint64 send_multicast_bit_rate = 32 [json_name = "send-multicast-bit-rate"];
            uint64 receive_multicast_bit_rate = 33 [json_name = "receive-multicast-bit-rate"];
            uint64 send_broad_bit_rate = 34 [json_name = "send-broad-bit-rate"];
            uint64 receive_broad_bit_rate = 35 [json_name = "receive-broad-bit-rate"];
            uint64 send_unicast_packet_rate = 36 [json_name = "send-unicast-packet-rate"];
            uint64 receive_unicast_packet_rate = 37 [json_name = "receive-unicast-packet-rate"];
            uint64 send_multicast_packet_rate = 38 [json_name = "send-multicast-packet-rate"];
            uint64 receive_multicast_packet_rate = 39 [json_name = "receive-multicast-packet-rate"];
            uint64 send_broadcast_packet_rate = 40 [json_name = "send-broadcast-packet-rate"];
            uint64 receive_broadcast_packet_rate = 41 [json_name = "receive-broadcast-packet-rate"];
         }
         CommonStatistics common_statistics = 38 [json_name = "common-statistics"];
         message ErrorDown {
            enum Cause {
               Cause_BPDUX_PROTECTION = 0;
               Cause_AUTOX_DEFEND = 1;
               Cause_MONITORX_LINK = 2;
               Cause_PORTSECX_REACHEDX_LIMIT = 65;
               Cause_STORMX_CONTROL = 66;
               Cause_LOOPBACKX_DETECT = 67;
               Cause_DUALX_ACTIVE = 68;
               Cause_MACX_ADDRESSX_FLAPPING = 69;
               Cause_NOX_STACKX_LINK = 70;
               Cause_CRCX_STATISTICS = 71;
               Cause_TRANSCEIVERX_POWERX_LOW = 72;
               Cause_LINKX_FLAP = 73;
               Cause_L2X_LOOPX_OCCURED = 74;
               Cause_STACKX_MEMBERX_EXCEEDX_LIMIT = 75;
               Cause_SPINEX_MEMBERX_EXCEEDX_LIMIT = 76;
               Cause_RESOURCEX_MISMATCH = 77;
               Cause_LEAFX_MSTP = 78;
               Cause_MX_LAG = 79;
               Cause_FABRICX_UPLINKX_THRESHOLD = 80;
               Cause_STACKX_CONFIGX_CONFLICT = 81;
               Cause_SPINEX_TYPEX_UNSUPPORTED = 82;
               Cause_STACKX_PACKETX_DEFENSIVE = 83;
               Cause_FORWARDX_ENGINEX_BUFFERX_FAILED = 85;
               Cause_FORWARDX_ENGINEX_INTERFACEX_FAILED = 86;
               Cause_FABRICX_LINKX_FAILURE = 87;
               Cause_MX_LAGX_CONSISTENCYX_CHECK = 88;
               Cause_PFCX_DEADLOCK = 89;
            };
            Cause cause = 1 [json_name = "cause"];
            uint32 recovery_time = 2 [json_name = "recovery-time"];
            uint32 remainder_time = 3 [json_name = "remainder-time"];
         }
         ErrorDown error_down = 39 [json_name = "error-down"];
         message VirtualPosition {
            string vnfc_name = 1 [json_name = "vnfc-name"];
            uint32 board_id = 2 [json_name = "board-id"];
            uint32 port_id = 3 [json_name = "port-id"];
         }
         VirtualPosition virtual_position = 40 [json_name = "virtual-position"];
         message TunnelProtocol {
         }
         TunnelProtocol tunnel_protocol = 41 [json_name = "tunnel-protocol"];
      }
      repeated Interface interface = 1 [json_name = "interface"];
   }
   Interfaces interfaces = 4 [json_name = "interfaces"];
   message StaticDimensionRanges {
      message StaticDimensionRange {
         enum Type {
            Type_ETHERNET = 0;
            Type_GIGABITETHERNET = 2;
            Type_ETHX_TRUNK = 4;
            Type_IPX_TRUNK = 5;
            Type_VIRTUALX_ETHERNET = 6;
            Type_SERIAL = 8;
            Type_POS = 9;
            Type_CPOS = 10;
            Type_ATM = 11;
            Type_TUNNEL = 14;
            Type_VLANIF = 15;
            Type_NULL = 18;
            Type_LOOPBACK = 19;
            Type_X_100GE = 20;
            Type_LMPIF = 21;
            Type_MTUNNEL = 22;
            Type_X_40GE = 23;
            Type_X_10GE = 24;
            Type_GEBRIEF = 25;
            Type_METH = 26;
            Type_STACKX_PORT = 27;
            Type_SIP = 28;
            Type_E1 = 30;
            Type_MPX_GROUP = 31;
            Type_IMAX_GROUP = 32;
            Type_VMETH = 33;
            Type_REMOTEX_AP = 35;
            Type_VBRIDGE = 36;
            Type_ATMX_BUNDLE = 37;
            Type_FIBERX_CHANNEL = 38;
            Type_INFINIBAND = 39;
            Type_VBDIF = 40;
            Type_T1 = 41;
            Type_T3 = 42;
            Type_VC4 = 43;
            Type_VC12 = 44;
            Type_GLOBALX_VE = 45;
            Type_FABRICX_PORT = 46;
            Type_E3 = 48;
            Type_VP = 49;
            Type_DCNINTERFACE = 50;
            Type_CPOSX_TRUNK = 51;
            Type_TRUNKX_SERIAL = 52;
            Type_GLOBALX_MPX_GROUP = 53;
            Type_OTN = 55;
            Type_GLOBALX_IMAX_GROUP = 57;
            Type_POSX_TRUNK = 59;
            Type_GMPLSX_UNI = 63;
            Type_WDM = 64;
            Type_NVE = 65;
            Type_FCOEX_PORT = 67;
            Type_VIRTUALX_TEMPLATE = 68;
            Type_FC = 70;
            Type_X_4X10GE = 71;
            Type_X_10X10GE = 72;
            Type_X_3X40GE = 73;
            Type_X_4X25GE = 74;
            Type_X_25GE = 75;
            Type_IMETH = 79;
            Type_PWX_VE = 88;
            Type_VXX_TUNNEL = 89;
            Type_SERVICEIF = 90;
            Type_XGIGABITETHERNET = 91;
            Type_X_200GE = 92;
            Type_VIRTUALX_ODUK = 94;
            Type_FLEXE = 95;
            Type_FLEXEX_200GE = 96;
            Type_X_50X_100GE = 101;
            Type_X_50GE = 102;
            Type_FLEXEX_50G = 103;
            Type_FLEXEX_100G = 104;
            Type_FLEXEX_50X_100G = 105;
            Type_VIRTUALX_SERIAL = 107;
            Type_X_400GE = 108;
            Type_HPGE = 114;
            Type_FLEXEX_400G = 115;
            Type_VIRTUALX_IF = 116;
            Type_CELLULAR = 117;
            Type_MULTIGE = 124;
            Type_FLEXEX_10G = 125;
            Type_OPTICALAMPLIFIER = 126;
         };
         Type type = 1 [json_name = "type"];
         string chassis_range = 2 [json_name = "chassis-range"];
         string slot_range = 3 [json_name = "slot-range"];
         string card_range = 4 [json_name = "card-range"];
         string port_range = 5 [json_name = "port-range"];
      }
      repeated StaticDimensionRange static_dimension_range = 1 [json_name = "static-dimension-range"];
   }
   StaticDimensionRanges static_dimension_ranges = 5 [json_name = "static-dimension-ranges"];
   message Ipv4InterfaceCount {
      uint32 physical_up_count = 1 [json_name = "physical-up-count"];
      uint32 physical_down_count = 2 [json_name = "physical-down-count"];
      uint32 protocol_up_count = 3 [json_name = "protocol-up-count"];
      uint32 protocol_down_count = 4 [json_name = "protocol-down-count"];
   }
   Ipv4InterfaceCount ipv4_interface_count = 6 [json_name = "ipv4-interface-count"];
   message RemoteInterfaces {
      message RemoteInterface {
         string name = 1 [json_name = "name"];
         uint32 index = 2 [json_name = "index"];
         message RemoteStatisticsState {
            string last_cleared_time = 1 [json_name = "last-cleared-time"];
            uint64 in_bit_rate = 2 [json_name = "in-bit-rate"];
            uint64 in_packet_rate = 3 [json_name = "in-packet-rate"];
            uint64 in_peak_bit_rate = 4 [json_name = "in-peak-bit-rate"];
            string in_peak_bit_rate_record_time = 5 [json_name = "in-peak-bit-rate-record-time"];
            uint64 out_bit_rate = 6 [json_name = "out-bit-rate"];
            uint64 out_packet_rate = 7 [json_name = "out-packet-rate"];
            uint64 out_peak_bit_rate = 8 [json_name = "out-peak-bit-rate"];
            string out_peak_bit_rate_record_time = 9 [json_name = "out-peak-bit-rate-record-time"];
            string in_use_rate = 10 [json_name = "in-use-rate"];
            string out_use_rate = 11 [json_name = "out-use-rate"];
         }
         RemoteStatisticsState remote_statistics_state = 3 [json_name = "remote-statistics-state"];
      }
      repeated RemoteInterface remote_interface = 1 [json_name = "remote-interface"];
   }
   RemoteInterfaces remote_interfaces = 7 [json_name = "remote-interfaces"];
}

